// src/index.tsx
import React from "react";
import { forwardRef } from "@welcome-ui/system";

// src/styles.ts
import styled, { css, system, th } from "@xstyled/styled-components";
import { Button as AriakitButton } from "@ariakit/react";
import { shouldForwardProp } from "@welcome-ui/system";
import { hideFocusRingsDataAttribute } from "@welcome-ui/utils";
var shapeStyles = (size, shape = "square") => css`
  width: ${th(`buttons.sizes.${size}.height`)};
  padding: 0;
  ${shape === "circle" && css`
    border-radius: ${th(`buttons.sizes.${size}.height`)};
  `};
`;
var Button = styled(AriakitButton).withConfig({ shouldForwardProp })(
  ({ disabled, shape, size = "md", variant }) => css`
    ${th(`buttons.${variant}`)};
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: auto;
    ${th(`buttons.sizes.${size}`)};
    text-decoration: none;
    text-align: center;
    white-space: nowrap;
    cursor: pointer;
    outline: none !important; /* important for firefox */
    border-width: sm;
    border-style: solid;
    appearance: none;
    overflow: hidden;
    transition: medium;
    ${shape && shapeStyles(size, shape)};
    ${system};

    & > svg.wui-icon,
    & > i.wui-icon-font {
      font-weight: initial;

      &:only-child {
        width: ${th(`buttons.icon.only.${size}`)};
        height: ${th(`buttons.icon.only.${size}`)};
        font-size: ${th(`buttons.icon.only.${size}`)};
      }
      &:not(:only-child) {
        width: ${th(`buttons.icon.default.${size}`)};
        height: ${th(`buttons.icon.default.${size}`)};
        font-size: ${th(`buttons.icon.default.${size}`)};
      }
    }

    & > *:not(:only-child):not(:last-child) {
      margin-right: sm;
    }

    ${!disabled && css`
      [${hideFocusRingsDataAttribute}] &:focus {
        box-shadow: none;
      }
      &:focus {
        ${th(`buttons.focus.${variant || "primary"}`)};
      }
      &:hover {
        ${th(`buttons.hover.${variant || "primary"}`)};
      }
      &:active {
        ${th(`buttons.active.${variant || "primary"}`)};
      }
    `};

    &[disabled] {
      cursor: not-allowed;
    }
  `
);

// src/index.tsx
var Button2 = forwardRef(
  ({ children, dataTestId, disabled, size = "md", variant = "primary", ...rest }, ref) => /* @__PURE__ */ React.createElement(
    Button,
    {
      "data-testid": dataTestId,
      disabled,
      ref,
      size,
      variant: disabled ? "disabled" : variant,
      ...rest
    },
    children
  )
);
Button2.displayName = "Button";
var StyledButton = Button;
export {
  Button2 as Button,
  StyledButton
};
