var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Button: () => Button2,
  StyledButton: () => StyledButton
});
module.exports = __toCommonJS(src_exports);
var import_react2 = __toESM(require("react"));
var import_system2 = require("@welcome-ui/system");

// src/styles.ts
var import_styled_components = __toESM(require("@xstyled/styled-components"));
var import_react = require("@ariakit/react");
var import_system = require("@welcome-ui/system");
var import_utils = require("@welcome-ui/utils");
var shapeStyles = (size, shape = "square") => import_styled_components.css`
  width: ${(0, import_styled_components.th)(`buttons.sizes.${size}.height`)};
  padding: 0;
  ${shape === "circle" && import_styled_components.css`
    border-radius: ${(0, import_styled_components.th)(`buttons.sizes.${size}.height`)};
  `};
`;
var Button = (0, import_styled_components.default)(import_react.Button).withConfig({ shouldForwardProp: import_system.shouldForwardProp })(
  ({ disabled, shape, size = "md", variant }) => import_styled_components.css`
    ${(0, import_styled_components.th)(`buttons.${variant}`)};
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    width: auto;
    ${(0, import_styled_components.th)(`buttons.sizes.${size}`)};
    text-decoration: none;
    text-align: center;
    white-space: nowrap;
    cursor: pointer;
    outline: none !important; /* important for firefox */
    border-width: sm;
    border-style: solid;
    appearance: none;
    overflow: hidden;
    transition: medium;
    ${shape && shapeStyles(size, shape)};
    ${import_styled_components.system};

    & > svg.wui-icon,
    & > i.wui-icon-font {
      font-weight: initial;

      &:only-child {
        width: ${(0, import_styled_components.th)(`buttons.icon.only.${size}`)};
        height: ${(0, import_styled_components.th)(`buttons.icon.only.${size}`)};
        font-size: ${(0, import_styled_components.th)(`buttons.icon.only.${size}`)};
      }
      &:not(:only-child) {
        width: ${(0, import_styled_components.th)(`buttons.icon.default.${size}`)};
        height: ${(0, import_styled_components.th)(`buttons.icon.default.${size}`)};
        font-size: ${(0, import_styled_components.th)(`buttons.icon.default.${size}`)};
      }
    }

    & > *:not(:only-child):not(:last-child) {
      margin-right: sm;
    }

    ${!disabled && import_styled_components.css`
      [${import_utils.hideFocusRingsDataAttribute}] &:focus {
        box-shadow: none;
      }
      &:focus {
        ${(0, import_styled_components.th)(`buttons.focus.${variant || "primary"}`)};
      }
      &:hover {
        ${(0, import_styled_components.th)(`buttons.hover.${variant || "primary"}`)};
      }
      &:active {
        ${(0, import_styled_components.th)(`buttons.active.${variant || "primary"}`)};
      }
    `};

    &[disabled] {
      cursor: not-allowed;
    }
  `
);

// src/index.tsx
var Button2 = (0, import_system2.forwardRef)(
  ({ children, dataTestId, disabled, size = "md", variant = "primary", ...rest }, ref) => /* @__PURE__ */ import_react2.default.createElement(
    Button,
    {
      "data-testid": dataTestId,
      disabled,
      ref,
      size,
      variant: disabled ? "disabled" : variant,
      ...rest
    },
    children
  )
);
Button2.displayName = "Button";
var StyledButton = Button;
