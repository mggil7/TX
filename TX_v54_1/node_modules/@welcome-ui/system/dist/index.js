var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  componentSystem: () => componentSystem,
  filterSystemProps: () => filterSystemProps,
  forwardRef: () => forwardRef,
  shouldForwardProp: () => shouldForwardProp,
  system: () => system,
  wrapperSystem: () => wrapperSystem
});
module.exports = __toCommonJS(src_exports);
var import_react = __toESM(require("react"));
var import_styled_components = require("@xstyled/styled-components");
var S = __toESM(require("@xstyled/styled-components"));
var oldProps = (0, import_styled_components.compose)(
  (0, import_styled_components.style)({ prop: "opacity" }),
  (0, import_styled_components.style)({ prop: "overflow" }),
  (0, import_styled_components.style)({ prop: "transition", themeGet: import_styled_components.getTransition }),
  (0, import_styled_components.style)({ prop: "position" }),
  (0, import_styled_components.style)({ prop: "zIndex", themeGet: import_styled_components.getZIndex }),
  (0, import_styled_components.style)({ prop: "top", themeGet: import_styled_components.getPx }),
  (0, import_styled_components.style)({ prop: "right", themeGet: import_styled_components.getPx }),
  (0, import_styled_components.style)({ prop: "bottom", themeGet: import_styled_components.getPx }),
  (0, import_styled_components.style)({ prop: "left", themeGet: import_styled_components.getPx })
);
var SYSTEM_PROPS = Object.freeze([
  S.backgrounds,
  S.borders,
  S.boxShadow,
  S.color,
  S.display,
  S.flexboxes,
  S.grids,
  S.height,
  S.maxHeight,
  S.maxWidth,
  S.minHeight,
  S.minWidth,
  S.space,
  S.typography,
  S.verticalAlign,
  S.width,
  oldProps
]);
var WRAPPER_PROPS = Object.freeze([
  S.margin,
  S.marginBottom,
  S.marginLeft,
  S.marginRight,
  S.marginTop,
  S.mx,
  S.my,
  S.width,
  oldProps
]);
var system = (0, import_styled_components.compose)(...SYSTEM_PROPS);
var wrapperSystem = (0, import_styled_components.compose)(...WRAPPER_PROPS);
var componentProps = system.meta.props.filter((prop) => !wrapperSystem.meta.props.includes(prop)).map((prop) => {
  if (prop === "w")
    return S["width"];
  if (prop === "h")
    return S["height"];
  return S[prop];
}).filter(Boolean);
var componentSystem = (0, import_styled_components.compose)(...componentProps);
var filterSystemProps = (prop) => !system.meta.props.includes(prop);
var shouldForwardProp = (prop, defaultValidatorFn) => defaultValidatorFn(prop);
var forwardRef = (component) => {
  return import_react.default.forwardRef(component);
};
