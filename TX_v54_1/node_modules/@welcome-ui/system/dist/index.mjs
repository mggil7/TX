// src/index.tsx
import React from "react";
import {
  compose,
  getPx,
  getTransition,
  getZIndex,
  style
} from "@xstyled/styled-components";
import * as S from "@xstyled/styled-components";
var oldProps = compose(
  style({ prop: "opacity" }),
  style({ prop: "overflow" }),
  style({ prop: "transition", themeGet: getTransition }),
  style({ prop: "position" }),
  style({ prop: "zIndex", themeGet: getZIndex }),
  style({ prop: "top", themeGet: getPx }),
  style({ prop: "right", themeGet: getPx }),
  style({ prop: "bottom", themeGet: getPx }),
  style({ prop: "left", themeGet: getPx })
);
var SYSTEM_PROPS = Object.freeze([
  S.backgrounds,
  S.borders,
  S.boxShadow,
  S.color,
  S.display,
  S.flexboxes,
  S.grids,
  S.height,
  S.maxHeight,
  S.maxWidth,
  S.minHeight,
  S.minWidth,
  S.space,
  S.typography,
  S.verticalAlign,
  S.width,
  oldProps
]);
var WRAPPER_PROPS = Object.freeze([
  S.margin,
  S.marginBottom,
  S.marginLeft,
  S.marginRight,
  S.marginTop,
  S.mx,
  S.my,
  S.width,
  oldProps
]);
var system = compose(...SYSTEM_PROPS);
var wrapperSystem = compose(...WRAPPER_PROPS);
var componentProps = system.meta.props.filter((prop) => !wrapperSystem.meta.props.includes(prop)).map((prop) => {
  if (prop === "w")
    return S["width"];
  if (prop === "h")
    return S["height"];
  return S[prop];
}).filter(Boolean);
var componentSystem = compose(...componentProps);
var filterSystemProps = (prop) => !system.meta.props.includes(prop);
var shouldForwardProp = (prop, defaultValidatorFn) => defaultValidatorFn(prop);
var forwardRef = (component) => {
  return React.forwardRef(component);
};
export {
  componentSystem,
  filterSystemProps,
  forwardRef,
  shouldForwardProp,
  system,
  wrapperSystem
};
