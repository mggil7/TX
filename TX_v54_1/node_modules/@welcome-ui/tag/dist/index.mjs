// src/index.tsx
import React from "react";
import { wrapChildren } from "@welcome-ui/utils";
import { forwardRef } from "@welcome-ui/system";
import { CrossIcon } from "@welcome-ui/icons";

// src/styles.ts
import styled, { css, system, th } from "@xstyled/styled-components";
import { StyledIcon } from "@welcome-ui/icon";
import { centerContent, getMax, overflowEllipsis } from "@welcome-ui/utils";
var shapeStyles = (size, w, h) => css`
  ${th(`tags.shape.${size}`)}
  padding: 0;
  ${(w || h) && css`
    width: ${getMax(w || "0", h)};
    height: ${getMax(w || "0", h)};
  `}
`;
var Tag = styled.div.withConfig({
  shouldForwardProp: (prop) => !["hasClickAction", "hasLink", "hasRemoveAction"].includes(prop)
})(
  ({ h, hasClickAction, hasLink, hasRemoveAction, length, size, variant, w }) => css`
    ${th("tags.default")};
    ${th(`tags.variants.${variant}`)};
    ${th(`tags.sizes.${size}`)}
    position: relative;
    display: inline-flex;
    align-items: center;
    justify-content: center;
    border-radius: md;
    line-height: initial; /* avoid cropped font */
    transition: medium;
    max-width: 100%;
    ${overflowEllipsis}
    ${system}
    ${length !== 1 && css`
      span,
      p {
        ${overflowEllipsis}
      }
    `}
    ${length === 1 && css`
      justify-content: center;
      ${shapeStyles(size, w, h)};
    `};

    ${(hasLink || hasClickAction) && css`
      cursor: pointer;
      text-decoration: none;

      &:hover {
        ${th(`tags.hover.${variant}`)};
      }
    `};

    ${hasRemoveAction && css`
      padding-right: xl;
    `}

    > *:not(:last-child) {
      margin-right: xxs;
    }

    & > svg {
      width: ${th(`tags.icon.${size}`)};
      height: ${th(`tags.icon.${size}`)};
    }

    > *:not(:only-child) {
      ${/* sc-selector */
  StyledIcon}:last-child {
        opacity: 1;
        transition: opacity ${th.transition("medium")};
        cursor: pointer;

        &:hover {
          opacity: 0.7;
        }
      }
    }
  `
);
var ActionIcon = styled.div(
  ({ size }) => css`
    position: absolute;
    ${th(`tags.sizes.${size}`)};
    top: 0;
    bottom: 0;
    right: 0;
    ${centerContent};
  `
);
var Button = styled.button`
  all: unset;
  display: flex;
`;

// src/index.tsx
var Tag2 = forwardRef(
  ({
    as,
    children,
    dataTestId,
    href,
    onClick,
    onRemove,
    size = "md",
    to,
    variant = "default",
    ...rest
  }, ref) => {
    const content = wrapChildren(children);
    const childrenLength = !!(children || children === 0) && ["number", "string"].includes(typeof children) && children.toString().length;
    const hasLink = !!href || !!to;
    return /* @__PURE__ */ React.createElement(
      Tag,
      {
        as,
        "data-testid": dataTestId,
        hasClickAction: !!onClick,
        hasLink,
        hasRemoveAction: !!onRemove,
        href,
        length: childrenLength,
        onClick,
        ref,
        size,
        to,
        variant,
        ...rest
      },
      content,
      !!onRemove && /* @__PURE__ */ React.createElement(ActionIcon, { size }, /* @__PURE__ */ React.createElement(Button, { onClick: onRemove, title: "Remove", type: "button" }, /* @__PURE__ */ React.createElement(CrossIcon, { size: "xs", title: "Remove" })))
    );
  }
);
Tag2.displayName = "Tag";
var StyledTag = Tag;
export {
  StyledTag,
  Tag2 as Tag
};
