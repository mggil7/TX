var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Select: () => Select,
  StyledSelect: () => StyledSelect
});
module.exports = __toCommonJS(src_exports);
var import_react2 = __toESM(require("react"));
var import_downshift = __toESM(require("downshift"));
var import_match_sorter = require("match-sorter");
var import_icons = require("@welcome-ui/icons");
var import_clear_button = require("@welcome-ui/clear-button");
var import_system2 = require("@welcome-ui/system");
var import_utils2 = require("@welcome-ui/utils");
var import_field = require("@welcome-ui/field");

// src/utils.ts
var EMPTY_STRING = "";
var kebabCase = (str) => {
  if (typeof str === "number") {
    return String(str);
  } else if (typeof str === "string") {
    const match = str.match(/[A-Z]{2,}(?=[A-Z][a-z]+[0-9]*|\b)|[A-Z]?[a-z]+[0-9]*|[A-Z]|[0-9]+/g);
    return match && match.map((x) => x.toLowerCase()).join("-");
  }
};
var itemToString = (item) => item ? item.label : EMPTY_STRING;
var getSpacer = (options) => {
  return options.reduce(
    (prev, current) => current.label && prev.length > current.label.length ? prev : current.label,
    EMPTY_STRING
  );
};
var getUniqueValue = (item, values, allowUnselectFromList) => {
  const isExisting = values.find((value) => item.value === value.value);
  if (isExisting && allowUnselectFromList) {
    return values.filter((value) => item.value !== value.value);
  }
  return isExisting ? values : [...values, item];
};
var isValueSelected = (value, options) => !!options.find((item) => item.value === value);
var getOption = (value, options = []) => {
  const option = options.find(
    (option2) => option2.label === (value.label || value) || option2.value === (value.value || value)
  );
  return option || { value: kebabCase(value), label: value };
};
var getOptionsFromSelected = (selected, options) => {
  if (!selected && selected !== 0) {
    return [];
  } else if (Array.isArray(selected)) {
    return selected.map((value) => getOption(value, options));
  } else {
    return [getOption(selected, options)];
  }
};
var getIsExisting = (option, options) => !!options.find((item) => item.value === option.value);
var getValue = (option, options) => getIsExisting(option, options) ? option.value : option.label;
var getValuesFromOptions = (selected, options) => {
  if (!selected) {
    return;
  }
  return selected.map((selected2) => getValue(selected2, options));
};
var getNewOptions = (selected, options) => {
  if (!selected) {
    return;
  }
  return selected.filter((item) => !options.find((option) => option.value === item.value));
};
var getInputValue = ({
  inputValue,
  isMultiple,
  isSearchable,
  options,
  renderItem
}) => {
  const option = getOption(inputValue, options);
  if (isMultiple) {
    return inputValue;
  }
  if (option.label) {
    if (isSearchable) {
      return option.label;
    } else {
      return renderItem(option);
    }
  }
  return EMPTY_STRING;
};

// src/multipleSelections.tsx
var import_react = __toESM(require("react"));
var import_tag2 = require("@welcome-ui/tag");

// src/styles.ts
var import_styled_components = __toESM(require("@xstyled/styled-components"));
var import_icon = require("@welcome-ui/icon");
var import_tag = require("@welcome-ui/tag");
var import_system = require("@welcome-ui/system");
var import_utils = require("@welcome-ui/utils");
var Wrapper = (0, import_styled_components.default)("div").withConfig({ shouldForwardProp: import_system.shouldForwardProp })`
  position: relative;
  ${import_styled_components.system}
`;
var InputWrapper = import_styled_components.default.div`
  position: relative;
`;
var Input = (0, import_styled_components.default)("div").withConfig({ shouldForwardProp: import_system.shouldForwardProp })(
  ({ iconPlacement, isClearable, size, transparent, variant }) => import_styled_components.css`
    position: relative;
    ${(0, import_utils.defaultFieldStyles)({
    size,
    variant,
    transparent,
    isClearable,
    iconPlacement
  })};
    ${import_utils.overflowEllipsis};
    cursor: default;
    ${import_styled_components.system}
    line-height: 1em;

    br {
      display: none;
    }

    &::before {
      content: attr(data-spacer);
      visibility: hidden;
      display: block;
      height: 0;
    }

    &:empty {
      &::after {
        content: attr(placeholder);
        position: absolute;
        top: 0;
        right: 0;
        bottom: 0;
        left: 0;
        ${import_utils.overflowEllipsis};
        padding: inherit;
        opacity: 0.5;
      }
      &::before {
        height: auto;
      }
    }
  `
);
var Menu = import_styled_components.default.ul`
  ${(0, import_styled_components.th)("defaultFields.select.default")};
  ${import_utils.cardStyles};
  position: absolute;
  z-index: 2;
  right: 0;
  left: 0;
  margin: 0;
  margin-top: md;
  padding: 0;
  transition: medium;
  overflow: auto;
  -webkit-overflow-scrolling: touch;
`;
var Item = import_styled_components.default.li(
  ({
    allowUnselectFromList,
    isDisabled,
    isHighlighted,
    isMultiple,
    isSelected
  }) => import_styled_components.css`
    color: nude-700;
    ${isHighlighted && (0, import_styled_components.th)("defaultFields.select.highlighted")};
    ${isSelected && !isMultiple && (0, import_styled_components.th)("defaultFields.select.selected")};
    ${isSelected && isMultiple && !allowUnselectFromList && (0, import_styled_components.th)("defaultFields.select.existing")};
    ${isDisabled && (0, import_styled_components.th)("defaultFields.select.disabled")};
    ${import_utils.overflowEllipsis};
    padding: md;
    list-style: none;
    text-decoration: none;
    font-size: sm;
    transition: background ${import_styled_components.th.transition("medium")};
  `
);
var Indicators = import_styled_components.default.div(
  ({ size }) => import_styled_components.css`
    position: absolute;
    padding: 0;
    top: 0;
    bottom: 0;
    right: ${size === "xs" ? "sm" : "md"};
    display: flex;
    gap: xs;
  `
);
var DropDownIndicator = import_styled_components.default.button.withConfig({ shouldForwardProp: import_system.shouldForwardProp })(
  ({ isOpen }) => import_styled_components.css`
    position: relative;
    height: 100%;
    padding: 0;
    outline: none !important; /* important for firefox */
    appearance: none;
    cursor: pointer;
    border: none;
    background: transparent;
    ${import_utils.centerContent};

    ${import_icon.StyledIcon} {
      transform: ${isOpen ? "rotate3d(0, 0, 1, 180deg)" : "rotate3d(0)"};
      transition: medium;
    }

    &:not(:last-child) {
      width: auto;
    }
  `
);
var Tags = import_styled_components.default.div`
  margin-top: lg;

  ${/* sc-selector */
import_tag.StyledTag}:not(:last-child) {
    margin-right: sm;
    margin-bottom: sm;
  }

  &:empty {
    display: none;
  }
`;

// src/multipleSelections.tsx
function multipleSelections(values, handleRemove) {
  return /* @__PURE__ */ import_react.default.createElement(Tags, { role: "list" }, values.map((tag) => /* @__PURE__ */ import_react.default.createElement(import_tag2.Tag, { key: tag.value, onRemove: () => handleRemove(tag.value.toString()), role: "listitem" }, tag.label)));
}

// src/index.tsx
var Downshift = import_downshift.default.default || import_downshift.default;
var Select = (0, import_system2.forwardRef)(
  ({
    autoComplete = "off",
    autoFocus,
    dataTestId,
    disabled,
    icon,
    id,
    isClearable,
    isCreatable,
    isMultiple,
    isSearchable,
    options: defaultOptions = [],
    name,
    onBlur,
    onChange,
    onClick,
    onCreate,
    onFocus,
    placeholder = "Choose from\u2026",
    renderCreateItem = (inputValue) => `Create "${inputValue}"`,
    renderItem = itemToString,
    renderMultiple = multipleSelections,
    size = "md",
    value: defaultSelected,
    variant,
    allowUnselectFromList,
    disableCloseOnSelect,
    groupsEnabled,
    renderGroupHeader,
    transparent,
    ...rest
  }, ref) => {
    const defaultSelecteds = (0, import_react2.useMemo)(
      () => getOptionsFromSelected(defaultSelected, defaultOptions),
      [defaultSelected, defaultOptions]
    );
    const selectedItem = !isMultiple && defaultSelecteds[0] || null;
    const defaultInputValue = selectedItem ? selectedItem.label : "";
    const [selected, setSelected] = (0, import_react2.useState)(defaultSelecteds);
    const [inputValue, setInputValue] = (0, import_react2.useState)(defaultInputValue);
    const [options, setOptions] = (0, import_react2.useState)(defaultOptions);
    const [isOpen, setIsOpen] = (0, import_react2.useState)(false);
    isSearchable = isCreatable || isSearchable;
    (0, import_react2.useEffect)(() => {
      if (autoFocus) {
        ref?.current?.focus();
        isSearchable && setIsOpen(true);
      }
    }, [isSearchable, autoFocus, ref]);
    (0, import_react2.useEffect)(() => {
      setSelected(defaultSelecteds);
      setInputValue(defaultInputValue);
      setOptions(defaultOptions);
    }, [defaultInputValue, defaultOptions, defaultSelecteds]);
    const handleInputChange = (value) => {
      if (isSearchable && value !== inputValue) {
        const options2 = (0, import_match_sorter.matchSorter)(defaultOptions, value, { keys: ["label"] });
        setInputValue(value);
        setOptions(options2);
      }
    };
    const handleInputKeyDown = () => {
      if (isSearchable && !isOpen) {
        setIsOpen(true);
      }
    };
    const handleChange = (options2) => {
      const values = getValuesFromOptions(options2, defaultOptions);
      const value = isMultiple ? values : values[0];
      const event = (0, import_utils2.createEvent)({ name, value: isMultiple ? options2 : options2[0] });
      onChange && onChange(value, event);
      if (isCreatable) {
        const newOptions = getNewOptions(options2, defaultOptions);
        if (newOptions.length) {
          onCreate && onCreate(newOptions[0].label, event);
        }
      }
    };
    const handleSelect = (option) => {
      let newItems;
      let isClearInput;
      if (!option || option?.disabled) {
        newItems = isMultiple ? selected : [];
        isClearInput = true;
      } else {
        newItems = isMultiple ? getUniqueValue(option, selected, allowUnselectFromList) : [option];
        isClearInput = isMultiple;
      }
      isClearInput && setInputValue("");
      setOptions(defaultOptions);
      setSelected(newItems);
      handleChange(newItems);
      if (!disableCloseOnSelect) {
        setIsOpen(false);
      }
    };
    const handleRemove = (value) => {
      const newItems = selected.filter((item) => item.value !== value);
      setSelected(newItems);
      handleChange(newItems);
    };
    const handleOuterClick = (e) => {
      if (isMultiple && e.selectedItem) {
        setInputValue("");
      } else if (isSearchable && e.selectedItem) {
        setInputValue(e.selectedItem.label);
      }
      setOptions(defaultOptions);
      setIsOpen(false);
    };
    const spacer = getSpacer(defaultOptions);
    const inputContent = getInputValue({
      inputValue,
      isMultiple,
      isSearchable,
      options: defaultOptions,
      renderItem
    });
    return /* @__PURE__ */ import_react2.default.createElement(
      Downshift,
      {
        id,
        inputValue: isSearchable ? inputContent : "",
        isOpen,
        itemToString,
        onInputValueChange: handleInputChange,
        onOuterClick: handleOuterClick,
        onSelect: handleSelect,
        selectedItem
      },
      ({
        clearSelection,
        getInputProps,
        getItemProps,
        getMenuProps,
        getRootProps,
        getToggleButtonProps,
        highlightedIndex
      }) => {
        const isShowCreate = !!(isCreatable && inputValue && !isValueSelected(inputValue, selected));
        const isShowMenu = isOpen && (options.length || isShowCreate);
        const isShowDeleteIcon = isClearable && inputValue;
        const DeleteIcon = /* @__PURE__ */ import_react2.default.createElement(DropDownIndicator, { as: "div" }, /* @__PURE__ */ import_react2.default.createElement(
          import_clear_button.ClearButton,
          {
            onClick: clearSelection
          }
        ));
        const ArrowIcon = /* @__PURE__ */ import_react2.default.createElement(
          DropDownIndicator,
          {
            "data-testid": dataTestId && `${dataTestId}-arrow-icon`,
            disabled,
            isOpen,
            size,
            tabIndex: -1,
            ...getToggleButtonProps({
              onClick: () => setIsOpen(!isOpen)
            })
          },
          /* @__PURE__ */ import_react2.default.createElement(import_icons.DownIcon, { color: "dark-900", size: "sm" })
        );
        const handleInputClick = (e) => {
          onClick && onClick(e);
          setIsOpen(!isOpen);
        };
        const rootProps = getRootProps(rest);
        const inputProps = getInputProps({
          autoComplete,
          autoFocus,
          "data-spacer": spacer || placeholder,
          "data-testid": dataTestId,
          disabled,
          iconPlacement: icon ? "both" : "right",
          id,
          name,
          onBlur,
          onClick: disabled ? void 0 : handleInputClick,
          onFocus,
          onKeyDown: handleInputKeyDown,
          placeholder,
          ref,
          size,
          tabIndex: 0,
          variant: isOpen ? "focused" : variant,
          isClearable,
          transparent,
          ...rest
          // eslint-disable-next-line @typescript-eslint/no-explicit-any
        });
        const iconSize = import_utils2.FIELD_ICON_SIZE[size];
        return /* @__PURE__ */ import_react2.default.createElement(Wrapper, { ...rootProps }, /* @__PURE__ */ import_react2.default.createElement(InputWrapper, null, isSearchable ? /* @__PURE__ */ import_react2.default.createElement(Input, { as: "input", type: "text", ...inputProps }) : /* @__PURE__ */ import_react2.default.createElement(Input, { ...inputProps }, inputContent), icon && /* @__PURE__ */ import_react2.default.createElement(import_field.IconWrapper, { iconPlacement: "left", size: iconSize }, import_react2.default.cloneElement(icon, { ...icon.props, size: iconSize })), /* @__PURE__ */ import_react2.default.createElement(Indicators, { size }, isShowDeleteIcon && DeleteIcon, ArrowIcon)), isShowMenu && /* @__PURE__ */ import_react2.default.createElement(Menu, { ...getMenuProps() }, options.reduce(
          (acc, result, resultIndex) => {
            if (groupsEnabled && "options" in result) {
              acc.itemsToRender.push(
                // eslint-disable-next-line @typescript-eslint/ban-ts-comment
                // @ts-ignore
                /* @__PURE__ */ import_react2.default.createElement(import_react2.Fragment, { key: result.label }, renderGroupHeader(result), result.options && result.options.map((option) => {
                  const index = acc.itemIndex++;
                  const isItemSelected = isValueSelected(option.value, selected);
                  return /* @__PURE__ */ import_react2.default.createElement(
                    Item,
                    {
                      allowUnselectFromList,
                      isDisabled: option.disabled,
                      isHighlighted: highlightedIndex === index,
                      isMultiple,
                      key: option.value,
                      ...getItemProps({
                        index,
                        isSelected: isItemSelected,
                        item: option
                      })
                    },
                    renderItem(option, isItemSelected)
                  );
                }))
              );
            } else if ("value" in result) {
              const isItemSelected = isValueSelected(result.value, selected);
              acc.itemsToRender.push(
                /* @__PURE__ */ import_react2.default.createElement(
                  Item,
                  {
                    allowUnselectFromList,
                    isDisabled: result.disabled,
                    isHighlighted: highlightedIndex === resultIndex,
                    isMultiple,
                    key: result.value,
                    ...getItemProps({
                      index: resultIndex,
                      isSelected: isItemSelected,
                      item: result
                    })
                  },
                  renderItem(result, isItemSelected)
                )
              );
            }
            return acc;
          },
          { itemsToRender: [], itemIndex: 0 }
        ).itemsToRender, isShowCreate && inputValue.length && /* @__PURE__ */ import_react2.default.createElement(
          Item,
          {
            isHighlighted: highlightedIndex === options.length,
            key: "add",
            ...getItemProps({
              index: options.length,
              item: {
                value: kebabCase(inputValue),
                label: inputValue
              }
            })
          },
          renderCreateItem(inputValue)
        )), isMultiple && renderMultiple(selected, handleRemove));
      }
    );
  }
);
var StyledSelect = Wrapper;
