// src/index.tsx
import React from "react";
import { Label as Label2 } from "@welcome-ui/label";
import { Hint } from "@welcome-ui/hint";
import { forwardRef } from "@welcome-ui/system";
import { useIsomorphicLayoutEffect } from "@welcome-ui/utils";
import { VariantIcon } from "@welcome-ui/variant-icon";

// src/styles.ts
import styled, { css, system, th } from "@xstyled/styled-components";
import { StyledLabel } from "@welcome-ui/label";
import { shouldForwardProp } from "@welcome-ui/system";
var checkableFieldStyles = css`
  ${th("defaultFields.checkablelabel.default")};
  align-items: flex-start;
  overflow-wrap: break-word;
`;
var Field = styled("div").withConfig({ shouldForwardProp })(
  ({ checked, isCheckable, isRadioGroup, withHintText }) => css`
    ${isCheckable && css`
      input {
        margin-top: xs;
      }
    `}
    ${StyledLabel} {
      ${isCheckable && checkableFieldStyles};
      ${isCheckable && withHintText && th("defaultFields.checkablelabel.default")}
      ${checked && th("defaultFields.checkablelabel.checked")}
      ${!isCheckable && css`
        margin-bottom: sm;
      `}
      ${isRadioGroup && css`
        margin-bottom: md;
      `}
    }
    ${system};
  `
);
var Label = styled.div`
  display: flex;
  align-items: flex-start;
  gap: sm;
`;
var LabelWithHint = styled.div`
  display: flex;
  flex-direction: column;
`;
var IconWrapper = styled.div(
  ({ iconPlacement, size }) => css`
    position: absolute;
    top: 0;
    left: ${iconPlacement === "left" ? th(`defaultFields.iconPlacement.${size}.left`) : "auto"};
    right: ${iconPlacement === "right" ? th(`defaultFields.iconPlacement.${size}.right`) : "auto"};
    bottom: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    pointer-events: none;
    transition: medium;
    transition-timing-function: primary;
    color: dark-900;
    ${system};

    /* for button action */
    & > button {
      pointer-events: auto;
    }

    ${size === "xs" && css`
      button {
        height: ${th("buttons.sizes.xxs.height")};
        width: ${th("buttons.sizes.xxs.height")};
      }
    `}
  `
);
var IconGroupWrapper = styled.div(
  ({ size }) => css`
    position: absolute;
    padding: 0;
    top: 0;
    bottom: 0;
    right: ${size === "xs" ? "sm" : "md"};
    display: flex;
    align-items: center;
    gap: xs;
    color: dark-900;
    ${size === "xs" && css`
      button {
        height: ${th("buttons.sizes.xxs.height")};
        width: ${th("buttons.sizes.xxs.height")};
      }
    `}
  `
);

// src/utils.ts
var TYPES = {
  Checkbox: "checkbox",
  Radio: "radio",
  InputText: "text",
  RadioTab: "radio",
  Select: "text",
  Toggle: "checkbox"
};
var getBaseType = (type) => TYPES[type] || type;
var getVariant = ({ error, info, success, warning }) => {
  if (error)
    return "error";
  if (warning)
    return "warning";
  if (success)
    return "success";
  if (info)
    return "info";
  return void 0;
};
var generateRandomId = () => `wui-field-${Math.random().toString(36).slice(2)}`;
var forwardedProps = ["disabled", "required", "variant"];

// src/index.tsx
var Field2 = forwardRef(
  ({
    children,
    dataTestId,
    disabled,
    disabledIcon,
    error,
    flexDirection,
    hint,
    info,
    label,
    required,
    success,
    transparent,
    warning,
    ...rest
  }, ref) => {
    const baseType = getBaseType(children.props.type || children.type.displayName);
    const isRadio = baseType === "radio";
    const isRadioGroup = baseType === "RadioGroup";
    const isFieldGroup = baseType === "FieldGroup";
    const isCheckbox = baseType === "checkbox";
    const isToggle = children.type.displayName === "Toggle";
    const isCheckable = isRadio || isCheckbox || isToggle;
    const layout = flexDirection || (isCheckable ? "row" : "column");
    const isGroup = isFieldGroup || isRadioGroup;
    const variant = getVariant({ error, warning, success, info });
    const hintText = variant ? error || warning || success || info : hint;
    const withHintText = !!hintText;
    const htmlFor = children.props.id || children.props.name || generateRandomId();
    const child = React.cloneElement(React.Children.only(children), {
      disabled,
      id: htmlFor,
      required,
      variant,
      transparent,
      ...isGroup ? { flexDirection: layout } : {}
    });
    useIsomorphicLayoutEffect(() => {
      Object.keys(children.props).forEach((prop) => {
        if (forwardedProps.includes(prop)) {
          const element = document.getElementById(htmlFor);
          console.warn(`You must pass the "${prop}" prop to the <Field /> instead of`, element);
        }
      });
    }, [children.props, children.type.displayName, htmlFor]);
    return /* @__PURE__ */ React.createElement(
      Field,
      {
        ref,
        ...rest,
        "data-testid": dataTestId,
        isCheckable,
        isRadioGroup,
        withHintText
      },
      /* @__PURE__ */ React.createElement(Label, null, isCheckable && child, /* @__PURE__ */ React.createElement(LabelWithHint, null, label && /* @__PURE__ */ React.createElement(
        Label2,
        {
          checkableField: isCheckable,
          disabled,
          disabledIcon,
          htmlFor,
          required,
          variant,
          withDisabledIcon: !isCheckable
        },
        isCheckable && /* @__PURE__ */ React.createElement(VariantIcon, { size: "sm", variant }),
        label
      ), isCheckable && hintText && /* @__PURE__ */ React.createElement(
        Hint,
        {
          checkableField: true,
          dataTestId: dataTestId ? `${dataTestId}-hint` : void 0,
          mt: "0",
          variant
        },
        hintText
      ))),
      !isCheckable && child,
      !isCheckable && hintText && /* @__PURE__ */ React.createElement(Hint, { dataTestId: dataTestId ? `${dataTestId}-hint` : void 0, variant }, hintText)
    );
  }
);
Field2.displayName = "Field";
var IconWrapper2 = IconWrapper;
var IconGroupWrapper2 = IconGroupWrapper;
export {
  Field2 as Field,
  IconGroupWrapper2 as IconGroupWrapper,
  IconWrapper2 as IconWrapper,
  getBaseType
};
