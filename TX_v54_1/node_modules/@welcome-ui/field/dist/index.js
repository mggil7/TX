var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  Field: () => Field2,
  IconGroupWrapper: () => IconGroupWrapper2,
  IconWrapper: () => IconWrapper2,
  getBaseType: () => getBaseType
});
module.exports = __toCommonJS(src_exports);
var import_react = __toESM(require("react"));
var import_label2 = require("@welcome-ui/label");
var import_hint = require("@welcome-ui/hint");
var import_system2 = require("@welcome-ui/system");
var import_utils = require("@welcome-ui/utils");
var import_variant_icon = require("@welcome-ui/variant-icon");

// src/styles.ts
var import_styled_components = __toESM(require("@xstyled/styled-components"));
var import_label = require("@welcome-ui/label");
var import_system = require("@welcome-ui/system");
var checkableFieldStyles = import_styled_components.css`
  ${(0, import_styled_components.th)("defaultFields.checkablelabel.default")};
  align-items: flex-start;
  overflow-wrap: break-word;
`;
var Field = (0, import_styled_components.default)("div").withConfig({ shouldForwardProp: import_system.shouldForwardProp })(
  ({ checked, isCheckable, isRadioGroup, withHintText }) => import_styled_components.css`
    ${isCheckable && import_styled_components.css`
      input {
        margin-top: xs;
      }
    `}
    ${import_label.StyledLabel} {
      ${isCheckable && checkableFieldStyles};
      ${isCheckable && withHintText && (0, import_styled_components.th)("defaultFields.checkablelabel.default")}
      ${checked && (0, import_styled_components.th)("defaultFields.checkablelabel.checked")}
      ${!isCheckable && import_styled_components.css`
        margin-bottom: sm;
      `}
      ${isRadioGroup && import_styled_components.css`
        margin-bottom: md;
      `}
    }
    ${import_styled_components.system};
  `
);
var Label = import_styled_components.default.div`
  display: flex;
  align-items: flex-start;
  gap: sm;
`;
var LabelWithHint = import_styled_components.default.div`
  display: flex;
  flex-direction: column;
`;
var IconWrapper = import_styled_components.default.div(
  ({ iconPlacement, size }) => import_styled_components.css`
    position: absolute;
    top: 0;
    left: ${iconPlacement === "left" ? (0, import_styled_components.th)(`defaultFields.iconPlacement.${size}.left`) : "auto"};
    right: ${iconPlacement === "right" ? (0, import_styled_components.th)(`defaultFields.iconPlacement.${size}.right`) : "auto"};
    bottom: 0;
    display: flex;
    justify-content: center;
    align-items: center;
    pointer-events: none;
    transition: medium;
    transition-timing-function: primary;
    color: dark-900;
    ${import_styled_components.system};

    /* for button action */
    & > button {
      pointer-events: auto;
    }

    ${size === "xs" && import_styled_components.css`
      button {
        height: ${(0, import_styled_components.th)("buttons.sizes.xxs.height")};
        width: ${(0, import_styled_components.th)("buttons.sizes.xxs.height")};
      }
    `}
  `
);
var IconGroupWrapper = import_styled_components.default.div(
  ({ size }) => import_styled_components.css`
    position: absolute;
    padding: 0;
    top: 0;
    bottom: 0;
    right: ${size === "xs" ? "sm" : "md"};
    display: flex;
    align-items: center;
    gap: xs;
    color: dark-900;
    ${size === "xs" && import_styled_components.css`
      button {
        height: ${(0, import_styled_components.th)("buttons.sizes.xxs.height")};
        width: ${(0, import_styled_components.th)("buttons.sizes.xxs.height")};
      }
    `}
  `
);

// src/utils.ts
var TYPES = {
  Checkbox: "checkbox",
  Radio: "radio",
  InputText: "text",
  RadioTab: "radio",
  Select: "text",
  Toggle: "checkbox"
};
var getBaseType = (type) => TYPES[type] || type;
var getVariant = ({ error, info, success, warning }) => {
  if (error)
    return "error";
  if (warning)
    return "warning";
  if (success)
    return "success";
  if (info)
    return "info";
  return void 0;
};
var generateRandomId = () => `wui-field-${Math.random().toString(36).slice(2)}`;
var forwardedProps = ["disabled", "required", "variant"];

// src/index.tsx
var Field2 = (0, import_system2.forwardRef)(
  ({
    children,
    dataTestId,
    disabled,
    disabledIcon,
    error,
    flexDirection,
    hint,
    info,
    label,
    required,
    success,
    transparent,
    warning,
    ...rest
  }, ref) => {
    const baseType = getBaseType(children.props.type || children.type.displayName);
    const isRadio = baseType === "radio";
    const isRadioGroup = baseType === "RadioGroup";
    const isFieldGroup = baseType === "FieldGroup";
    const isCheckbox = baseType === "checkbox";
    const isToggle = children.type.displayName === "Toggle";
    const isCheckable = isRadio || isCheckbox || isToggle;
    const layout = flexDirection || (isCheckable ? "row" : "column");
    const isGroup = isFieldGroup || isRadioGroup;
    const variant = getVariant({ error, warning, success, info });
    const hintText = variant ? error || warning || success || info : hint;
    const withHintText = !!hintText;
    const htmlFor = children.props.id || children.props.name || generateRandomId();
    const child = import_react.default.cloneElement(import_react.default.Children.only(children), {
      disabled,
      id: htmlFor,
      required,
      variant,
      transparent,
      ...isGroup ? { flexDirection: layout } : {}
    });
    (0, import_utils.useIsomorphicLayoutEffect)(() => {
      Object.keys(children.props).forEach((prop) => {
        if (forwardedProps.includes(prop)) {
          const element = document.getElementById(htmlFor);
          console.warn(`You must pass the "${prop}" prop to the <Field /> instead of`, element);
        }
      });
    }, [children.props, children.type.displayName, htmlFor]);
    return /* @__PURE__ */ import_react.default.createElement(
      Field,
      {
        ref,
        ...rest,
        "data-testid": dataTestId,
        isCheckable,
        isRadioGroup,
        withHintText
      },
      /* @__PURE__ */ import_react.default.createElement(Label, null, isCheckable && child, /* @__PURE__ */ import_react.default.createElement(LabelWithHint, null, label && /* @__PURE__ */ import_react.default.createElement(
        import_label2.Label,
        {
          checkableField: isCheckable,
          disabled,
          disabledIcon,
          htmlFor,
          required,
          variant,
          withDisabledIcon: !isCheckable
        },
        isCheckable && /* @__PURE__ */ import_react.default.createElement(import_variant_icon.VariantIcon, { size: "sm", variant }),
        label
      ), isCheckable && hintText && /* @__PURE__ */ import_react.default.createElement(
        import_hint.Hint,
        {
          checkableField: true,
          dataTestId: dataTestId ? `${dataTestId}-hint` : void 0,
          mt: "0",
          variant
        },
        hintText
      ))),
      !isCheckable && child,
      !isCheckable && hintText && /* @__PURE__ */ import_react.default.createElement(import_hint.Hint, { dataTestId: dataTestId ? `${dataTestId}-hint` : void 0, variant }, hintText)
    );
  }
);
Field2.displayName = "Field";
var IconWrapper2 = IconWrapper;
var IconGroupWrapper2 = IconGroupWrapper;
