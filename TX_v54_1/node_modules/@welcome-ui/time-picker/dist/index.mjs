// src/index.tsx
import React, { useEffect, useState } from "react";
import {
  CustomInput,
  CustomPopper,
  DEFAULT_DATE,
  getDate,
  StyledTimePicker
} from "@welcome-ui/date-time-picker-common";
import { forwardRef } from "@welcome-ui/system";

// src/styles.ts
import styled from "@xstyled/styled-components";
import { fixAriaMessageStyle } from "@welcome-ui/date-time-picker-common";
var Wrapper = styled.div`
  position: relative;
  ${fixAriaMessageStyle}
`;

// src/index.tsx
var TimePicker = forwardRef(
  ({
    autoFocus,
    dataTestId,
    dateFormat = "HH:mm",
    disabled,
    value = DEFAULT_DATE,
    onBlur,
    onChange,
    onFocus,
    size = "md",
    icon,
    iconPlacement = "left",
    placeholder,
    popperProps,
    timeIntervals = 15,
    transparent,
    ...rest
  }, ref) => {
    const formatDate = (date2) => getDate(date2, timeIntervals);
    const placeholderText = placeholder || rest.placeholderText;
    const [focused, setFocused] = useState(autoFocus && "time" || null);
    const [date, setDate] = useState(formatDate(value));
    useEffect(() => {
      onChange && onChange(formatDate(value));
    }, []);
    useEffect(() => {
      const formattedDate = formatDate(value);
      if (new Date(value)?.getTime() - formattedDate?.getTime() !== 0 && onChange) {
        onChange(formattedDate);
      }
      setDate(formattedDate);
    }, [value]);
    const handleFocus = (e) => {
      setFocused("time");
      onFocus && onFocus(e);
    };
    const handleBlur = (e) => {
      setFocused(null);
      onBlur && onBlur(e);
    };
    const handleReset = (e) => {
      e.preventDefault();
      setDate(null);
      onChange && onChange();
    };
    const handleChange = (newDate) => {
      if (!newDate)
        return;
      const date2 = formatDate(newDate);
      newDate.setFullYear(date2.getFullYear(), date2.getMonth(), date2.getDate());
      setDate(newDate);
      onChange && onChange(new Date(newDate));
    };
    return /* @__PURE__ */ React.createElement(Wrapper, null, /* @__PURE__ */ React.createElement(
      StyledTimePicker,
      {
        calendarClassName: "time-picker-popper",
        customInput: /* @__PURE__ */ React.createElement(
          CustomInput,
          {
            className: "time-picker",
            "data-testid": dataTestId,
            focused,
            handleBlur,
            handleFocus,
            icon,
            iconPlacement,
            onReset: handleReset,
            ref,
            size
          }
        ),
        dateFormat,
        disabled,
        iconPlacement: !!icon && iconPlacement,
        onChange: handleChange,
        placeholderText,
        popperContainer: CustomPopper,
        popperProps,
        selected: date,
        showTimeSelect: true,
        showTimeSelectOnly: true,
        size,
        timeIntervals,
        transparent,
        ...rest,
        isClearable: false
      }
    ));
  }
);
TimePicker.displayName = "TimePicker";
export {
  TimePicker
};
