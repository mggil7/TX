var __create = Object.create;
var __defProp = Object.defineProperty;
var __getOwnPropDesc = Object.getOwnPropertyDescriptor;
var __getOwnPropNames = Object.getOwnPropertyNames;
var __getProtoOf = Object.getPrototypeOf;
var __hasOwnProp = Object.prototype.hasOwnProperty;
var __export = (target, all) => {
  for (var name in all)
    __defProp(target, name, { get: all[name], enumerable: true });
};
var __copyProps = (to, from, except, desc) => {
  if (from && typeof from === "object" || typeof from === "function") {
    for (let key of __getOwnPropNames(from))
      if (!__hasOwnProp.call(to, key) && key !== except)
        __defProp(to, key, { get: () => from[key], enumerable: !(desc = __getOwnPropDesc(from, key)) || desc.enumerable });
  }
  return to;
};
var __toESM = (mod, isNodeMode, target) => (target = mod != null ? __create(__getProtoOf(mod)) : {}, __copyProps(
  // If the importer is in node compatibility mode or this is not an ESM
  // file that has been converted to a CommonJS file using a Babel-
  // compatible transform (i.e. "__esModule" has not been set), then set
  // "default" to the CommonJS "module.exports" for node compatibility.
  isNodeMode || !mod || !mod.__esModule ? __defProp(target, "default", { value: mod, enumerable: true }) : target,
  mod
));
var __toCommonJS = (mod) => __copyProps(__defProp({}, "__esModule", { value: true }), mod);

// src/index.tsx
var src_exports = {};
__export(src_exports, {
  TimePicker: () => TimePicker
});
module.exports = __toCommonJS(src_exports);
var import_react = __toESM(require("react"));
var import_date_time_picker_common2 = require("@welcome-ui/date-time-picker-common");
var import_system = require("@welcome-ui/system");

// src/styles.ts
var import_styled_components = __toESM(require("@xstyled/styled-components"));
var import_date_time_picker_common = require("@welcome-ui/date-time-picker-common");
var Wrapper = import_styled_components.default.div`
  position: relative;
  ${import_date_time_picker_common.fixAriaMessageStyle}
`;

// src/index.tsx
var TimePicker = (0, import_system.forwardRef)(
  ({
    autoFocus,
    dataTestId,
    dateFormat = "HH:mm",
    disabled,
    value = import_date_time_picker_common2.DEFAULT_DATE,
    onBlur,
    onChange,
    onFocus,
    size = "md",
    icon,
    iconPlacement = "left",
    placeholder,
    popperProps,
    timeIntervals = 15,
    transparent,
    ...rest
  }, ref) => {
    const formatDate = (date2) => (0, import_date_time_picker_common2.getDate)(date2, timeIntervals);
    const placeholderText = placeholder || rest.placeholderText;
    const [focused, setFocused] = (0, import_react.useState)(autoFocus && "time" || null);
    const [date, setDate] = (0, import_react.useState)(formatDate(value));
    (0, import_react.useEffect)(() => {
      onChange && onChange(formatDate(value));
    }, []);
    (0, import_react.useEffect)(() => {
      const formattedDate = formatDate(value);
      if (new Date(value)?.getTime() - formattedDate?.getTime() !== 0 && onChange) {
        onChange(formattedDate);
      }
      setDate(formattedDate);
    }, [value]);
    const handleFocus = (e) => {
      setFocused("time");
      onFocus && onFocus(e);
    };
    const handleBlur = (e) => {
      setFocused(null);
      onBlur && onBlur(e);
    };
    const handleReset = (e) => {
      e.preventDefault();
      setDate(null);
      onChange && onChange();
    };
    const handleChange = (newDate) => {
      if (!newDate)
        return;
      const date2 = formatDate(newDate);
      newDate.setFullYear(date2.getFullYear(), date2.getMonth(), date2.getDate());
      setDate(newDate);
      onChange && onChange(new Date(newDate));
    };
    return /* @__PURE__ */ import_react.default.createElement(Wrapper, null, /* @__PURE__ */ import_react.default.createElement(
      import_date_time_picker_common2.StyledTimePicker,
      {
        calendarClassName: "time-picker-popper",
        customInput: /* @__PURE__ */ import_react.default.createElement(
          import_date_time_picker_common2.CustomInput,
          {
            className: "time-picker",
            "data-testid": dataTestId,
            focused,
            handleBlur,
            handleFocus,
            icon,
            iconPlacement,
            onReset: handleReset,
            ref,
            size
          }
        ),
        dateFormat,
        disabled,
        iconPlacement: !!icon && iconPlacement,
        onChange: handleChange,
        placeholderText,
        popperContainer: import_date_time_picker_common2.CustomPopper,
        popperProps,
        selected: date,
        showTimeSelect: true,
        showTimeSelectOnly: true,
        size,
        timeIntervals,
        transparent,
        ...rest,
        isClearable: false
      }
    ));
  }
);
TimePicker.displayName = "TimePicker";
