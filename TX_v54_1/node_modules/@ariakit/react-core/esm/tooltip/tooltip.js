import {
  useHovercard
} from "../__chunks/F7UYWUBJ.js";
import "../__chunks/X7FKJQME.js";
import "../__chunks/H3CXUGYG.js";
import {
  createDialogComponent
} from "../__chunks/UXIMR4AS.js";
import "../__chunks/NXB7YL3C.js";
import "../__chunks/HWJ7DGMR.js";
import "../__chunks/7LB47D2O.js";
import "../__chunks/62DFK33R.js";
import "../__chunks/FRKOFFMT.js";
import "../__chunks/EGOOWJGN.js";
import "../__chunks/7VWXICM7.js";
import "../__chunks/KOVUJERF.js";
import "../__chunks/IXXFVVA2.js";
import "../__chunks/VRCYQ6JX.js";
import "../__chunks/7JNF6I52.js";
import "../__chunks/3LGVTTHD.js";
import "../__chunks/FW6QFGFT.js";
import "../__chunks/CJI67A3R.js";
import "../__chunks/REKKG4AV.js";
import "../__chunks/6OMX4H3W.js";
import "../__chunks/IDYHJHXJ.js";
import "../__chunks/QW4PFVNF.js";
import "../__chunks/LDDPB3PY.js";
import "../__chunks/COQHFAEN.js";
import "../__chunks/PGK6S5NC.js";
import "../__chunks/KK6NPMOP.js";
import {
  TooltipScopedContextProvider,
  useTooltipProviderContext
} from "../__chunks/3QOG4FFB.js";
import "../__chunks/5DA3HK6G.js";
import "../__chunks/547DFODS.js";
import "../__chunks/5YYGDU4E.js";
import "../__chunks/56KWVYDN.js";
import "../__chunks/YTHH33BK.js";
import "../__chunks/BMLNRUFQ.js";
import "../__chunks/6XXSNRNX.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/CFEUKV6C.js";
import "../__chunks/IZFXPXHG.js";
import "../__chunks/OD3JT64N.js";
import "../__chunks/WHAB4XD6.js";
import {
  useWrapElement
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/tooltip/tooltip.tsx
import { contains } from "@ariakit/core/utils/dom";
import { invariant, isFalsyBooleanCallback } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var useTooltip = createHook(
  (_a) => {
    var _b = _a, {
      store,
      portal = true,
      gutter = 8,
      preserveTabOrder = false,
      hideOnHoverOutside = true,
      hideOnInteractOutside = true
    } = _b, props = __objRest(_b, [
      "store",
      "portal",
      "gutter",
      "preserveTabOrder",
      "hideOnHoverOutside",
      "hideOnInteractOutside"
    ]);
    const context = useTooltipProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "Tooltip must receive a `store` prop or be wrapped in a TooltipProvider component."
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(TooltipScopedContextProvider, { value: store, children: element }),
      [store]
    );
    const role = store.useState(
      (state) => state.type === "description" ? "tooltip" : "none"
    );
    props = __spreadValues({ role }, props);
    props = useHovercard(__spreadProps(__spreadValues({}, props), {
      store,
      portal,
      gutter,
      preserveTabOrder,
      hideOnHoverOutside: (event) => {
        if (isFalsyBooleanCallback(hideOnHoverOutside, event))
          return false;
        const anchorElement = store == null ? void 0 : store.getState().anchorElement;
        if (!anchorElement)
          return true;
        if ("focusVisible" in anchorElement.dataset)
          return false;
        return true;
      },
      hideOnInteractOutside: (event) => {
        if (isFalsyBooleanCallback(hideOnInteractOutside, event))
          return false;
        const anchorElement = store == null ? void 0 : store.getState().anchorElement;
        if (!anchorElement)
          return true;
        if (contains(anchorElement, event.target))
          return false;
        return true;
      }
    }));
    return props;
  }
);
var Tooltip = createDialogComponent(
  createComponent((props) => {
    const htmlProps = useTooltip(props);
    return createElement("div", htmlProps);
  }),
  useTooltipProviderContext
);
if (process.env.NODE_ENV !== "production") {
  Tooltip.displayName = "Tooltip";
}
export {
  Tooltip,
  useTooltip
};
