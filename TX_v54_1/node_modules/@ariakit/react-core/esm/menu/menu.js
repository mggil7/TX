import {
  useMenuList
} from "../__chunks/2BTPJSKW.js";
import {
  useMenuProviderContext
} from "../__chunks/2GC3IEM7.js";
import "../__chunks/YVYWIVKG.js";
import "../__chunks/56TAEBRJ.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/5C7J4IAS.js";
import "../__chunks/74KKBFVP.js";
import {
  useHovercard
} from "../__chunks/F7UYWUBJ.js";
import "../__chunks/X7FKJQME.js";
import "../__chunks/H3CXUGYG.js";
import {
  createDialogComponent
} from "../__chunks/UXIMR4AS.js";
import "../__chunks/NXB7YL3C.js";
import "../__chunks/HWJ7DGMR.js";
import "../__chunks/7LB47D2O.js";
import "../__chunks/62DFK33R.js";
import "../__chunks/FRKOFFMT.js";
import "../__chunks/EGOOWJGN.js";
import "../__chunks/7VWXICM7.js";
import "../__chunks/KOVUJERF.js";
import "../__chunks/IXXFVVA2.js";
import "../__chunks/VRCYQ6JX.js";
import "../__chunks/7JNF6I52.js";
import "../__chunks/3LGVTTHD.js";
import "../__chunks/FW6QFGFT.js";
import "../__chunks/CJI67A3R.js";
import "../__chunks/REKKG4AV.js";
import "../__chunks/6OMX4H3W.js";
import "../__chunks/IDYHJHXJ.js";
import "../__chunks/QW4PFVNF.js";
import "../__chunks/LDDPB3PY.js";
import "../__chunks/COQHFAEN.js";
import "../__chunks/PGK6S5NC.js";
import "../__chunks/KK6NPMOP.js";
import "../__chunks/5DA3HK6G.js";
import "../__chunks/547DFODS.js";
import "../__chunks/5YYGDU4E.js";
import "../__chunks/56KWVYDN.js";
import "../__chunks/YTHH33BK.js";
import "../__chunks/BMLNRUFQ.js";
import "../__chunks/6XXSNRNX.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/CFEUKV6C.js";
import "../__chunks/IZFXPXHG.js";
import "../__chunks/OD3JT64N.js";
import "../__chunks/WHAB4XD6.js";
import {
  useMergeRefs
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/menu/menu.tsx
import { createRef, useEffect, useRef, useState } from "react";
import { hasFocusWithin } from "@ariakit/core/utils/focus";
import { invariant, isFalsyBooleanCallback } from "@ariakit/core/utils/misc";
var useMenu = createHook(
  (_a) => {
    var _b = _a, {
      store,
      modal: modalProp = false,
      portal = !!modalProp,
      hideOnEscape = true,
      autoFocusOnShow = true,
      hideOnHoverOutside,
      alwaysVisible
    } = _b, props = __objRest(_b, [
      "store",
      "modal",
      "portal",
      "hideOnEscape",
      "autoFocusOnShow",
      "hideOnHoverOutside",
      "alwaysVisible"
    ]);
    const context = useMenuProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "Menu must receive a `store` prop or be wrapped in a MenuProvider component."
    );
    const ref = useRef(null);
    const parentMenu = store.parent;
    const parentMenuBar = store.menubar;
    const hasParentMenu = !!parentMenu;
    const parentIsMenuBar = !!parentMenuBar && !hasParentMenu;
    props = __spreadProps(__spreadValues({}, props), {
      ref: useMergeRefs(ref, props.ref)
    });
    const _a2 = useMenuList(
      __spreadValues({ store, alwaysVisible }, props)
    ), { "aria-labelledby": ariaLabelledBy } = _a2, menuListProps = __objRest(_a2, ["aria-labelledby"]);
    props = menuListProps;
    const [initialFocusRef, setInitialFocusRef] = useState();
    const autoFocusOnShowState = store.useState("autoFocusOnShow");
    const initialFocus = store.useState("initialFocus");
    const baseElement = store.useState("baseElement");
    const items = store.useState("renderedItems");
    useEffect(() => {
      let cleaning = false;
      setInitialFocusRef((prevInitialFocusRef) => {
        var _a3, _b2, _c;
        if (cleaning)
          return;
        if (!autoFocusOnShowState)
          return;
        if ((_a3 = prevInitialFocusRef == null ? void 0 : prevInitialFocusRef.current) == null ? void 0 : _a3.isConnected)
          return prevInitialFocusRef;
        const ref2 = createRef();
        switch (initialFocus) {
          case "first":
            ref2.current = ((_b2 = items.find((item) => !item.disabled && item.element)) == null ? void 0 : _b2.element) || null;
            break;
          case "last":
            ref2.current = ((_c = [...items].reverse().find((item) => !item.disabled && item.element)) == null ? void 0 : _c.element) || null;
            break;
          default:
            ref2.current = baseElement;
        }
        if (!ref2.current)
          return;
        return ref2;
      });
      return () => {
        cleaning = true;
      };
    }, [store, autoFocusOnShowState, initialFocus, items, baseElement]);
    const modal = hasParentMenu ? false : modalProp;
    const mayAutoFocusOnShow = !!autoFocusOnShow;
    const canAutoFocusOnShow = !!initialFocusRef || !!props.initialFocus || !!modal;
    props = useHovercard(__spreadProps(__spreadValues({
      store,
      alwaysVisible,
      initialFocus: initialFocusRef,
      autoFocusOnShow: mayAutoFocusOnShow ? canAutoFocusOnShow && autoFocusOnShow : autoFocusOnShowState || !!modal
    }, props), {
      hideOnEscape: (event) => {
        if (isFalsyBooleanCallback(hideOnEscape, event))
          return false;
        store == null ? void 0 : store.hideAll();
        return true;
      },
      hideOnHoverOutside: (event) => {
        if (typeof hideOnHoverOutside === "function") {
          return hideOnHoverOutside(event);
        }
        if (hideOnHoverOutside != null)
          return hideOnHoverOutside;
        if (hasParentMenu) {
          parentMenu.setActiveId(null);
          return true;
        }
        if (!parentIsMenuBar)
          return false;
        const disclosure = store == null ? void 0 : store.getState().disclosureElement;
        if (!disclosure)
          return true;
        if (hasFocusWithin(disclosure))
          return false;
        return true;
      },
      modal,
      portal,
      backdrop: hasParentMenu ? false : props.backdrop
    }));
    props = __spreadValues({
      "aria-labelledby": ariaLabelledBy
    }, props);
    return props;
  }
);
var Menu = createDialogComponent(
  createComponent((props) => {
    const htmlProps = useMenu(props);
    return createElement("div", htmlProps);
  }),
  useMenuProviderContext
);
if (process.env.NODE_ENV !== "production") {
  Menu.displayName = "Menu";
}
export {
  Menu,
  useMenu
};
