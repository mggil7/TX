import type { MenuBarStore } from "./menu-bar-store.js";
import type { MenuStore } from "./menu-store.js";
/**
 * Returns the menu store from the nearest menu container.
 * @example
 * function Menu() {
 *   const store = useMenuContext();
 *
 *   if (!store) {
 *     throw new Error("Menu must be wrapped in MenuProvider");
 *   }
 *
 *   // Use the store...
 * }
 */
export declare const useMenuContext: () => MenuStore | undefined;
export declare const useMenuScopedContext: (onlyScoped?: boolean) => MenuStore | undefined;
export declare const useMenuProviderContext: () => MenuStore | undefined;
export declare const MenuContextProvider: (props: import("react").ProviderProps<MenuStore | undefined>) => import("react/jsx-runtime").JSX.Element;
export declare const MenuScopedContextProvider: (props: import("react").ProviderProps<MenuStore | undefined>) => import("react/jsx-runtime").JSX.Element;
/**
 * Returns the menuBar store from the nearest menuBar container.
 * @example
 * function MenuBar() {
 *   const store = useMenuBarContext();
 *
 *   if (!store) {
 *     throw new Error("MenuBar must be wrapped in MenuBarProvider");
 *   }
 *
 *   // Use the store...
 * }
 */
export declare const useMenuBarContext: () => MenuBarStore | undefined;
export declare const useMenuBarScopedContext: (onlyScoped?: boolean) => MenuBarStore | undefined;
export declare const useMenuBarProviderContext: () => MenuBarStore | undefined;
export declare const MenuBarContextProvider: (props: import("react").ProviderProps<MenuBarStore | undefined>) => import("react/jsx-runtime").JSX.Element;
export declare const MenuBarScopedContextProvider: (props: import("react").ProviderProps<MenuBarStore | undefined>) => import("react/jsx-runtime").JSX.Element;
export declare const MenuItemCheckedContext: import("react").Context<boolean | undefined>;
