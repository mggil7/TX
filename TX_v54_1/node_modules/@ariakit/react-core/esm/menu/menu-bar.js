import {
  MenuBarScopedContextProvider,
  useMenuBarProviderContext
} from "../__chunks/2GC3IEM7.js";
import {
  useComposite
} from "../__chunks/56TAEBRJ.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/5C7J4IAS.js";
import "../__chunks/74KKBFVP.js";
import "../__chunks/5DA3HK6G.js";
import "../__chunks/547DFODS.js";
import "../__chunks/5YYGDU4E.js";
import "../__chunks/56KWVYDN.js";
import "../__chunks/YTHH33BK.js";
import "../__chunks/BMLNRUFQ.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/CFEUKV6C.js";
import {
  useWrapElement
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/menu/menu-bar.tsx
import { invariant } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var useMenuBar = createHook(
  (_a) => {
    var _b = _a, { store, composite = true } = _b, props = __objRest(_b, ["store", "composite"]);
    const context = useMenuBarProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "MenuBar must receive a `store` prop or be wrapped in a MenuBarProvider component."
    );
    const orientation = store.useState(
      (state) => !composite || state.orientation === "both" ? void 0 : state.orientation
    );
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(MenuBarScopedContextProvider, { value: store, children: element }),
      [store]
    );
    if (composite) {
      props = __spreadValues({
        role: "menubar",
        "aria-orientation": orientation
      }, props);
    }
    props = useComposite(__spreadValues({ store, composite }, props));
    return props;
  }
);
var MenuBar = createComponent((props) => {
  const htmlProps = useMenuBar(props);
  return createElement("div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  MenuBar.displayName = "MenuBar";
}
export {
  MenuBar,
  useMenuBar
};
