import * as Core from "@ariakit/core/menu/menu-store";
import type { BivariantCallback, PickRequired } from "@ariakit/core/utils/types";
import type { ComboboxStore } from "../combobox/combobox-store.js";
import type { CompositeStoreFunctions, CompositeStoreOptions, CompositeStoreState } from "../composite/composite-store.js";
import type { HovercardStoreFunctions, HovercardStoreOptions, HovercardStoreState } from "../hovercard/hovercard-store.js";
import type { Store } from "../utils/store.js";
import type { MenuBarStore } from "./menu-bar-store.js";
type Values = Core.MenuStoreValues;
export declare function useMenuStoreProps<T extends Core.MenuStore>(store: T, update: () => void, props: MenuStoreProps): T & {
    combobox: (import("../combobox/combobox-store.js").ComboboxStoreFunctions & import("@ariakit/core/combobox/combobox-store").ComboboxStoreFunctions & import("@ariakit/core/utils/store").Store<import("@ariakit/core/combobox/combobox-store").ComboboxStoreState> & {
        useState: {
            (): import("@ariakit/core/combobox/combobox-store").ComboboxStoreState;
            <K extends keyof import("@ariakit/core/combobox/combobox-store").ComboboxStoreState>(key: K): import("@ariakit/core/combobox/combobox-store").ComboboxStoreState[K];
            <V>(selector: (state: import("@ariakit/core/combobox/combobox-store").ComboboxStoreState) => V): V;
        };
    }) | null | undefined;
    parent: (MenuStoreFunctions<Core.MenuStoreValues> & Core.MenuStoreFunctions<Core.MenuStoreValues> & import("@ariakit/core/utils/store").Store<Core.MenuStoreState<Core.MenuStoreValues>> & {
        useState: {
            (): Core.MenuStoreState<Core.MenuStoreValues>;
            <K_1 extends keyof Core.MenuStoreState<Core.MenuStoreValues>>(key: K_1): Core.MenuStoreState<Core.MenuStoreValues>[K_1];
            <V_1>(selector: (state: Core.MenuStoreState<Core.MenuStoreValues>) => V_1): V_1;
        };
    } & Core.MenuStoreFunctions<{
        [x: string]: string | number | boolean | (string | number)[];
    }> & import("@ariakit/core/utils/store").Store<Core.MenuStoreState<{
        [x: string]: string | number | boolean | (string | number)[];
    }>>) | null | undefined;
    menubar: (import("./menu-bar-store.js").MenuBarStoreFunctions & import("@ariakit/core/composite/composite-store").CompositeStoreFunctions<{
        id: string;
        element?: HTMLElement | null | undefined;
    } & {
        rowId?: string | undefined;
        disabled?: boolean | undefined;
        children?: string | undefined;
    }> & import("@ariakit/core/utils/store").Store<import("@ariakit/core/composite/composite-store").CompositeStoreState<{
        id: string;
        element?: HTMLElement | null | undefined;
    } & {
        rowId?: string | undefined;
        disabled?: boolean | undefined;
        children?: string | undefined;
    }>> & {
        useState: {
            (): import("@ariakit/core/composite/composite-store").CompositeStoreState<{
                id: string;
                element?: HTMLElement | null | undefined;
            } & {
                rowId?: string | undefined;
                disabled?: boolean | undefined;
                children?: string | undefined;
            }>;
            <K_2 extends keyof import("@ariakit/core/composite/composite-store").CompositeStoreState<{
                id: string;
                element?: HTMLElement | null | undefined;
            } & {
                rowId?: string | undefined;
                disabled?: boolean | undefined;
                children?: string | undefined;
            }>>(key: K_2): import("@ariakit/core/composite/composite-store").CompositeStoreState<{
                id: string;
                element?: HTMLElement | null | undefined;
            } & {
                rowId?: string | undefined;
                disabled?: boolean | undefined;
                children?: string | undefined;
            }>[K_2];
            <V_2>(selector: (state: import("@ariakit/core/composite/composite-store").CompositeStoreState<{
                id: string;
                element?: HTMLElement | null | undefined;
            } & {
                rowId?: string | undefined;
                disabled?: boolean | undefined;
                children?: string | undefined;
            }>) => V_2): V_2;
        };
    }) | null | undefined;
};
/**
 * Creates a menu store.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const menu = useMenuStore({ placement: "top" });
 * <MenuButton store={menu}>Edit</MenuButton>
 * <Menu store={menu}>
 *   <MenuItem>Undo</MenuItem>
 *   <MenuItem>Redo</MenuItem>
 * </Menu>
 * ```
 */
export declare function useMenuStore<T extends Values = Values>(props: PickRequired<MenuStoreProps<T>, "values" | "defaultValues">): MenuStore<T>;
export declare function useMenuStore(props?: MenuStoreProps): MenuStore;
export type MenuStoreValues = Core.MenuStoreValues;
export interface MenuStoreState<T extends Values = Values> extends Core.MenuStoreState<T>, CompositeStoreState, HovercardStoreState {
}
export interface MenuStoreFunctions<T extends Values = Values> extends Pick<MenuStoreOptions, "combobox" | "parent" | "menubar">, Omit<Core.MenuStoreFunctions<T>, "combobox" | "parent" | "menubar">, CompositeStoreFunctions, HovercardStoreFunctions {
}
export interface MenuStoreOptions<T extends Values = Values> extends Core.MenuStoreOptions<T>, CompositeStoreOptions, HovercardStoreOptions {
    /**
     * A callback that gets called when the `values` state changes.
     *
     * Live examples:
     * - [MenuItemCheckbox](https://ariakit.org/examples/menu-item-checkbox)
     */
    setValues?: BivariantCallback<(values: MenuStoreState<T>["values"]) => void>;
    /**
     * A reference to a combobox store. This is used when combining the combobox
     * with a menu (e.g., dropdown menu with a search input). The stores will
     * share the same state.
     */
    combobox?: ComboboxStore | null;
    /**
     * A reference to a parent menu store. It's automatically set when nesting
     * menus in the React tree. You should manually set this if menus aren't
     * nested in the React tree.
     *
     * Live examples:
     * - [MenuBar](https://ariakit.org/examples/menu-bar)
     * - [Submenu](https://ariakit.org/examples/menu-nested)
     */
    parent?: MenuStore | null;
    /**
     * A reference to a menu bar store. It's automatically set when rendering
     * menus inside a menu bar in the React tree.
     */
    menubar?: MenuBarStore | null;
}
export type MenuStoreProps<T extends Values = Values> = MenuStoreOptions<T> & Core.MenuStoreProps<T>;
export type MenuStore<T extends Values = Values> = MenuStoreFunctions<T> & Store<Core.MenuStore<T>>;
export {};
