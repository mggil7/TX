import {
  hasExpandedMenuButton
} from "../__chunks/W7JXAQKF.js";
import {
  MenuContextProvider,
  useMenuProviderContext
} from "../__chunks/2GC3IEM7.js";
import {
  usePopoverDisclosure
} from "../__chunks/HXYXHHNW.js";
import "../__chunks/5EAW3TWZ.js";
import "../__chunks/LRDCOOWL.js";
import "../__chunks/4FNI7F6H.js";
import "../__chunks/TONP6TZ5.js";
import {
  useCompositeTypeahead
} from "../__chunks/YVYWIVKG.js";
import "../__chunks/CAIAWNDV.js";
import {
  useHovercardAnchor
} from "../__chunks/KXTLHNBI.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/5C7J4IAS.js";
import "../__chunks/74KKBFVP.js";
import {
  Role
} from "../__chunks/PGK6S5NC.js";
import "../__chunks/5DA3HK6G.js";
import "../__chunks/547DFODS.js";
import "../__chunks/5YYGDU4E.js";
import "../__chunks/56KWVYDN.js";
import "../__chunks/YTHH33BK.js";
import "../__chunks/BMLNRUFQ.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/CFEUKV6C.js";
import {
  useStoreState
} from "../__chunks/WHAB4XD6.js";
import {
  useEvent,
  useId,
  useMergeRefs,
  useWrapElement
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/menu/menu-button.tsx
import { useEffect, useRef } from "react";
import { getPopupItemRole, getPopupRole } from "@ariakit/core/utils/dom";
import { invariant } from "@ariakit/core/utils/misc";
import { sync } from "@ariakit/core/utils/store";
import { jsx } from "react/jsx-runtime";
function getInitialFocus(event, dir) {
  const keyMap = {
    ArrowDown: dir === "bottom" || dir === "top" ? "first" : false,
    ArrowUp: dir === "bottom" || dir === "top" ? "last" : false,
    ArrowRight: dir === "right" ? "first" : false,
    ArrowLeft: dir === "left" ? "first" : false
  };
  return keyMap[event.key];
}
var useMenuButton = createHook(
  (_a) => {
    var _b = _a, { store, focusable, accessibleWhenDisabled, showOnHover } = _b, props = __objRest(_b, ["store", "focusable", "accessibleWhenDisabled", "showOnHover"]);
    const context = useMenuProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "MenuButton must receive a `store` prop or be wrapped in a MenuProvider component."
    );
    const ref = useRef(null);
    const parentMenu = store.parent;
    const parentMenuBar = store.menubar;
    const hasParentMenu = !!parentMenu;
    const parentIsMenuBar = !!parentMenuBar && !hasParentMenu;
    const disabled = props.disabled || props["aria-disabled"] === true || props["aria-disabled"] === "true";
    useEffect(() => {
      return sync(store, ["disclosureElement"], (state) => {
        if (!state.disclosureElement)
          return;
        store == null ? void 0 : store.setState("disclosureElement", ref.current);
      });
    }, [store]);
    const onFocusProp = props.onFocus;
    const onFocus = useEvent((event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (disabled)
        return;
      if (event.defaultPrevented)
        return;
      store == null ? void 0 : store.setAutoFocusOnShow(false);
      store == null ? void 0 : store.setActiveId(null);
      if (!parentMenuBar)
        return;
      if (!parentIsMenuBar)
        return;
      const { items } = parentMenuBar.getState();
      if (hasExpandedMenuButton(items, event.currentTarget)) {
        store == null ? void 0 : store.show();
      }
    });
    const dir = store.useState(
      (state) => state.placement.split("-")[0]
    );
    const onKeyDownProp = props.onKeyDown;
    const onKeyDown = useEvent((event) => {
      onKeyDownProp == null ? void 0 : onKeyDownProp(event);
      if (disabled)
        return;
      if (event.defaultPrevented)
        return;
      const initialFocus = getInitialFocus(event, dir);
      if (initialFocus) {
        event.preventDefault();
        store == null ? void 0 : store.show();
        store == null ? void 0 : store.setAutoFocusOnShow(true);
        store == null ? void 0 : store.setInitialFocus(initialFocus);
      }
    });
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (!store)
        return;
      const isKeyboardClick = !event.detail;
      const { open } = store.getState();
      if (!open || isKeyboardClick) {
        if (!hasParentMenu || isKeyboardClick) {
          store.setAutoFocusOnShow(true);
        }
        store.setInitialFocus(isKeyboardClick ? "first" : "container");
      }
      if (hasParentMenu) {
        store.show();
      }
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(MenuContextProvider, { value: store, children: element }),
      [store]
    );
    if (hasParentMenu) {
      props = __spreadProps(__spreadValues({}, props), {
        render: /* @__PURE__ */ jsx(Role.div, { render: props.render })
      });
    }
    const id = useId(props.id);
    const parentContentElement = useStoreState(parentMenu, "contentElement");
    const role = hasParentMenu || parentIsMenuBar ? getPopupItemRole(parentContentElement, "menuitem") : void 0;
    const contentElement = store.useState("contentElement");
    props = __spreadProps(__spreadValues({
      id,
      role,
      "aria-haspopup": getPopupRole(contentElement, "menu")
    }, props), {
      ref: useMergeRefs(ref, props.ref),
      onFocus,
      onKeyDown,
      onClick
    });
    props = useHovercardAnchor(__spreadProps(__spreadValues({
      store,
      focusable,
      accessibleWhenDisabled
    }, props), {
      showOnHover: (event) => {
        if (typeof showOnHover === "function")
          return showOnHover(event);
        if (showOnHover != null)
          return showOnHover;
        if (hasParentMenu)
          return true;
        if (!parentMenuBar)
          return false;
        const { items } = parentMenuBar.getState();
        return parentIsMenuBar && hasExpandedMenuButton(items);
      }
    }));
    props = usePopoverDisclosure(__spreadValues({
      store,
      toggleOnClick: !hasParentMenu,
      focusable,
      accessibleWhenDisabled
    }, props));
    props = useCompositeTypeahead(__spreadValues({
      store,
      typeahead: parentIsMenuBar
    }, props));
    return props;
  }
);
var MenuButton = createComponent((props) => {
  const htmlProps = useMenuButton(props);
  return createElement("button", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  MenuButton.displayName = "MenuButton";
}
export {
  MenuButton,
  useMenuButton
};
