import {
  useRadioContext
} from "./NRFPH2ON.js";
import {
  useCompositeItem
} from "./IQXVWBXC.js";
import {
  createElement,
  createHook,
  createMemoComponent
} from "./CFEUKV6C.js";
import {
  useStoreState
} from "./WHAB4XD6.js";
import {
  useEvent,
  useId,
  useMergeRefs,
  useTagName
} from "./J7Q2EO23.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/radio/radio.ts
import { useEffect, useRef } from "react";
function getIsChecked(value, storeValue) {
  if (storeValue === void 0)
    return;
  if (value != null && storeValue != null) {
    return storeValue === value;
  }
  return !!storeValue;
}
function isNativeRadio(tagName, type) {
  return tagName === "input" && (!type || type === "radio");
}
var useRadio = createHook(
  (_a) => {
    var _b = _a, { store, value, checked } = _b, props = __objRest(_b, ["store", "value", "checked"]);
    const context = useRadioContext();
    store = store || context;
    const id = useId(props.id);
    const ref = useRef(null);
    const isChecked = useStoreState(
      store,
      (state) => checked != null ? checked : getIsChecked(value, state == null ? void 0 : state.value)
    );
    useEffect(() => {
      if (!id)
        return;
      if (!isChecked)
        return;
      const isActiveItem = (store == null ? void 0 : store.getState().activeId) === id;
      if (isActiveItem)
        return;
      store == null ? void 0 : store.setActiveId(id);
    }, [store, isChecked, id]);
    const onChangeProp = props.onChange;
    const tagName = useTagName(ref, props.as || "input");
    const nativeRadio = isNativeRadio(tagName, props.type);
    const onChange = useEvent((event) => {
      if (props.disabled) {
        event.preventDefault();
        event.stopPropagation();
        return;
      }
      if (!nativeRadio) {
        event.currentTarget.checked = true;
      }
      onChangeProp == null ? void 0 : onChangeProp(event);
      if (event.defaultPrevented)
        return;
      store == null ? void 0 : store.setValue(value);
    });
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (nativeRadio)
        return;
      onChange(event);
    });
    const onFocusProp = props.onFocus;
    const onFocus = useEvent((event) => {
      onFocusProp == null ? void 0 : onFocusProp(event);
      if (event.defaultPrevented)
        return;
      if (!nativeRadio)
        return;
      if (!store)
        return;
      const { moves, activeId } = store.getState();
      if (!moves)
        return;
      if (id && activeId !== id)
        return;
      onChange(event);
    });
    props = __spreadProps(__spreadValues({
      id,
      role: !nativeRadio ? "radio" : void 0,
      type: nativeRadio ? "radio" : void 0,
      "aria-checked": isChecked
    }, props), {
      ref: useMergeRefs(ref, props.ref),
      onChange,
      onClick,
      onFocus
    });
    props = useCompositeItem(__spreadValues({ store, clickOnEnter: !nativeRadio }, props));
    return __spreadValues({
      value: nativeRadio ? value : void 0,
      checked: isChecked
    }, props);
  }
);
var Radio = createMemoComponent((props) => {
  const htmlProps = useRadio(props);
  return createElement("input", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  Radio.displayName = "Radio";
}

export {
  useRadio,
  Radio
};
