import {
  useDisclosure
} from "./LRDCOOWL.js";
import {
  useDialogProviderContext
} from "./5YYGDU4E.js";
import {
  createComponent,
  createElement,
  createHook
} from "./CFEUKV6C.js";
import {
  __objRest,
  __spreadValues
} from "./PNRLI7OV.js";

// src/dialog/dialog-disclosure.ts
import { getPopupRole } from "@ariakit/core/utils/dom";
import { invariant } from "@ariakit/core/utils/misc";
var useDialogDisclosure = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = useDialogProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "DialogDisclosure must receive a `store` prop or be wrapped in a DialogProvider component."
    );
    const contentElement = store.useState("contentElement");
    props = __spreadValues({
      "aria-haspopup": getPopupRole(contentElement, "dialog")
    }, props);
    props = useDisclosure(__spreadValues({ store }, props));
    return props;
  }
);
var DialogDisclosure = createComponent(
  (props) => {
    const htmlProps = useDialogDisclosure(props);
    return createElement("button", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  DialogDisclosure.displayName = "DialogDisclosure";
}

export {
  useDialogDisclosure,
  DialogDisclosure
};
