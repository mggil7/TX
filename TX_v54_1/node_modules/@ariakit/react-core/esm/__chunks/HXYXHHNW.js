import {
  useDialogDisclosure
} from "./5EAW3TWZ.js";
import {
  usePopoverAnchor
} from "./4FNI7F6H.js";
import {
  PopoverScopedContextProvider,
  usePopoverProviderContext
} from "./547DFODS.js";
import {
  createComponent,
  createElement,
  createHook
} from "./CFEUKV6C.js";
import {
  useEvent,
  useWrapElement
} from "./J7Q2EO23.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "./PNRLI7OV.js";

// src/popover/popover-disclosure.tsx
import { invariant } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
var usePopoverDisclosure = createHook(
  (_a) => {
    var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
    const context = usePopoverProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "PopoverDisclosure must receive a `store` prop or be wrapped in a PopoverProvider component."
    );
    const onClickProp = props.onClick;
    const onClick = useEvent((event) => {
      store == null ? void 0 : store.setAnchorElement(event.currentTarget);
      onClickProp == null ? void 0 : onClickProp(event);
    });
    props = useWrapElement(
      props,
      (element) => /* @__PURE__ */ jsx(PopoverScopedContextProvider, { value: store, children: element }),
      [store]
    );
    props = __spreadProps(__spreadValues({}, props), {
      onClick
    });
    props = usePopoverAnchor(__spreadValues({ store }, props));
    props = useDialogDisclosure(__spreadValues({ store }, props));
    return props;
  }
);
var PopoverDisclosure = createComponent(
  (props) => {
    const htmlProps = usePopoverDisclosure(props);
    return createElement("button", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  PopoverDisclosure.displayName = "PopoverDisclosure";
}

export {
  usePopoverDisclosure,
  PopoverDisclosure
};
