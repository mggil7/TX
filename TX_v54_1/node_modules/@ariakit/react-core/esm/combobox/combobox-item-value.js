import {
  ComboboxItemValueContext,
  useComboboxScopedContext
} from "../__chunks/QP4RN5UY.js";
import "../__chunks/5C7J4IAS.js";
import "../__chunks/74KKBFVP.js";
import "../__chunks/547DFODS.js";
import "../__chunks/5YYGDU4E.js";
import "../__chunks/56KWVYDN.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/CFEUKV6C.js";
import "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/combobox/combobox-item-value.tsx
import { useContext, useMemo } from "react";
import { invariant, normalizeString } from "@ariakit/core/utils/misc";
import { jsx } from "react/jsx-runtime";
function normalizeValue(value) {
  return normalizeString(value).toLowerCase();
}
function splitValue(itemValue, userValue) {
  userValue = normalizeValue(userValue);
  let index = normalizeValue(itemValue).indexOf(userValue);
  const parts = [];
  while (index !== -1) {
    if (index !== 0) {
      parts.push(
        /* @__PURE__ */ jsx("span", { "data-autocomplete-value": "", children: itemValue.substr(0, index) }, parts.length)
      );
    }
    parts.push(
      /* @__PURE__ */ jsx("span", { "data-user-value": "", children: itemValue.substr(index, userValue.length) }, parts.length)
    );
    itemValue = itemValue.substr(index + userValue.length);
    index = normalizeValue(itemValue).indexOf(userValue);
  }
  if (itemValue) {
    parts.push(
      /* @__PURE__ */ jsx("span", { "data-autocomplete-value": "", children: itemValue }, parts.length)
    );
  }
  return parts;
}
var useComboboxItemValue = createHook(
  (_a) => {
    var _b = _a, { store, value } = _b, props = __objRest(_b, ["store", "value"]);
    const context = useComboboxScopedContext();
    store = store || context;
    const itemContext = useContext(ComboboxItemValueContext);
    const itemValue = value != null ? value : itemContext;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "ComboboxItemValue must be wrapped in a ComboboxItem component."
    );
    const stateValue = store.useState(
      (state) => itemValue && state.value ? state.value : void 0
    );
    const children = useMemo(
      () => itemValue && stateValue ? splitValue(itemValue, stateValue) : itemValue,
      [itemValue, stateValue]
    );
    props = __spreadValues({
      children
    }, props);
    return props;
  }
);
var ComboboxItemValue = createComponent(
  (props) => {
    const htmlProps = useComboboxItemValue(props);
    return createElement("span", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  ComboboxItemValue.displayName = "ComboboxItemValue";
}
export {
  ComboboxItemValue,
  useComboboxItemValue
};
