import {
  useComboboxList
} from "../__chunks/E3ZC4HKO.js";
import {
  useComboboxProviderContext
} from "../__chunks/QP4RN5UY.js";
import "../__chunks/5C7J4IAS.js";
import "../__chunks/74KKBFVP.js";
import {
  usePopover
} from "../__chunks/H3CXUGYG.js";
import {
  createDialogComponent
} from "../__chunks/UXIMR4AS.js";
import "../__chunks/NXB7YL3C.js";
import "../__chunks/HWJ7DGMR.js";
import "../__chunks/7LB47D2O.js";
import "../__chunks/62DFK33R.js";
import "../__chunks/FRKOFFMT.js";
import "../__chunks/EGOOWJGN.js";
import "../__chunks/7VWXICM7.js";
import "../__chunks/KOVUJERF.js";
import "../__chunks/IXXFVVA2.js";
import "../__chunks/VRCYQ6JX.js";
import "../__chunks/7JNF6I52.js";
import "../__chunks/3LGVTTHD.js";
import "../__chunks/FW6QFGFT.js";
import "../__chunks/CJI67A3R.js";
import "../__chunks/REKKG4AV.js";
import "../__chunks/6OMX4H3W.js";
import "../__chunks/IDYHJHXJ.js";
import "../__chunks/QW4PFVNF.js";
import "../__chunks/LDDPB3PY.js";
import "../__chunks/COQHFAEN.js";
import "../__chunks/PGK6S5NC.js";
import "../__chunks/KK6NPMOP.js";
import "../__chunks/547DFODS.js";
import "../__chunks/5YYGDU4E.js";
import "../__chunks/56KWVYDN.js";
import "../__chunks/YTHH33BK.js";
import "../__chunks/BMLNRUFQ.js";
import "../__chunks/6XXSNRNX.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/CFEUKV6C.js";
import "../__chunks/IZFXPXHG.js";
import "../__chunks/OD3JT64N.js";
import "../__chunks/WHAB4XD6.js";
import "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/combobox/combobox-popover.tsx
import { matches } from "@ariakit/core/utils/dom";
import { invariant } from "@ariakit/core/utils/misc";
function isController(target, ...ids) {
  if (!target)
    return false;
  if ("id" in target) {
    const selector = ids.filter(Boolean).map((id) => `[aria-controls="${id}"]`).join(", ");
    if (!selector)
      return false;
    return matches(target, selector);
  }
  return false;
}
var useComboboxPopover = createHook(
  (_a) => {
    var _b = _a, {
      store,
      tabIndex,
      alwaysVisible,
      hideOnInteractOutside = true
    } = _b, props = __objRest(_b, [
      "store",
      "tabIndex",
      "alwaysVisible",
      "hideOnInteractOutside"
    ]);
    const context = useComboboxProviderContext();
    store = store || context;
    invariant(
      store,
      process.env.NODE_ENV !== "production" && "ComboboxPopover must receive a `store` prop or be wrapped in a ComboboxProvider component."
    );
    const baseElement = store.useState("baseElement");
    props = useComboboxList(__spreadValues({ store, alwaysVisible }, props));
    props = usePopover(__spreadProps(__spreadValues({
      store,
      alwaysVisible,
      autoFocusOnShow: false,
      autoFocusOnHide: false,
      finalFocus: baseElement
    }, props), {
      // Combobox popovers can't be modal because the focus may be (and is by
      // default) outside of it on the combobox input element.
      modal: false,
      // Make sure we don't hide the popover when the user interacts with the
      // combobox cancel or the combobox disclosure buttons. They will have the
      // aria-controls attribute pointing to either the combobox input or the
      // combobox popover elements.
      hideOnInteractOutside: (event) => {
        var _a2, _b2;
        const state = store == null ? void 0 : store.getState();
        const contentId = (_a2 = state == null ? void 0 : state.contentElement) == null ? void 0 : _a2.id;
        const baseId = (_b2 = state == null ? void 0 : state.baseElement) == null ? void 0 : _b2.id;
        if (isController(event.target, contentId, baseId))
          return false;
        const result = typeof hideOnInteractOutside === "function" ? hideOnInteractOutside(event) : hideOnInteractOutside;
        return result;
      }
    }));
    return props;
  }
);
var ComboboxPopover = createDialogComponent(
  createComponent((props) => {
    const htmlProps = useComboboxPopover(props);
    return createElement("div", htmlProps);
  }),
  useComboboxProviderContext
);
if (process.env.NODE_ENV !== "production") {
  ComboboxPopover.displayName = "ComboboxPopover";
}
export {
  ComboboxPopover,
  useComboboxPopover
};
