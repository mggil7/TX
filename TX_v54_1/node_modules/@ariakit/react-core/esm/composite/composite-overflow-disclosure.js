import {
  usePopoverDisclosure
} from "../__chunks/HXYXHHNW.js";
import "../__chunks/5EAW3TWZ.js";
import "../__chunks/LRDCOOWL.js";
import "../__chunks/4FNI7F6H.js";
import "../__chunks/TONP6TZ5.js";
import {
  useCompositeItem
} from "../__chunks/IQXVWBXC.js";
import "../__chunks/CAIAWNDV.js";
import "../__chunks/XIA3HAXM.js";
import "../__chunks/OXPV2NBK.js";
import "../__chunks/5C7J4IAS.js";
import "../__chunks/74KKBFVP.js";
import "../__chunks/547DFODS.js";
import "../__chunks/5YYGDU4E.js";
import "../__chunks/56KWVYDN.js";
import "../__chunks/YTHH33BK.js";
import "../__chunks/BMLNRUFQ.js";
import {
  createComponent,
  createElement,
  createHook
} from "../__chunks/CFEUKV6C.js";
import "../__chunks/WHAB4XD6.js";
import {
  useEvent,
  useMergeRefs
} from "../__chunks/J7Q2EO23.js";
import "../__chunks/CP3U4HPL.js";
import {
  __objRest,
  __spreadProps,
  __spreadValues
} from "../__chunks/PNRLI7OV.js";

// src/composite/composite-overflow-disclosure.ts
import { useEffect, useRef, useState } from "react";
import { sync } from "@ariakit/core/utils/store";
var useCompositeOverflowDisclosure = createHook((_a) => {
  var _b = _a, { store } = _b, props = __objRest(_b, ["store"]);
  const ref = useRef(null);
  const [shouldRegisterItem, setShouldRegisterItem] = useState(false);
  useEffect(() => {
    return sync(store, ["disclosureElement"], () => {
      store.setDisclosureElement(ref.current);
    });
  }, [store]);
  const onFocusProp = props.onFocus;
  const onFocus = useEvent((event) => {
    onFocusProp == null ? void 0 : onFocusProp(event);
    if (event.defaultPrevented)
      return;
    setShouldRegisterItem(true);
  });
  const onBlurProp = props.onBlur;
  const onBlur = useEvent((event) => {
    onBlurProp == null ? void 0 : onBlurProp(event);
    if (event.defaultPrevented)
      return;
    setShouldRegisterItem(false);
  });
  props = __spreadProps(__spreadValues({
    "aria-hidden": !shouldRegisterItem
  }, props), {
    ref: useMergeRefs(props.ref, ref),
    onFocus,
    onBlur
  });
  props = useCompositeItem(__spreadProps(__spreadValues({}, props), { shouldRegisterItem }));
  props = usePopoverDisclosure(__spreadValues({ store }, props));
  return props;
});
var CompositeOverflowDisclosure = createComponent((props) => {
  const htmlProps = useCompositeOverflowDisclosure(props);
  return createElement("button", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  CompositeOverflowDisclosure.displayName = "CompositeOverflowDisclosure";
}
export {
  CompositeOverflowDisclosure,
  useCompositeOverflowDisclosure
};
