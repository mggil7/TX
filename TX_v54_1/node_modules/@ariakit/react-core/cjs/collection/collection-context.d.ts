import type { CollectionStore } from "./collection-store.js";
/**
 * Returns the collection store from the nearest collection container.
 * @example
 * function CollectionItem() {
 *   const store = useCollectionContext();
 *
 *   if (!store) {
 *     throw new Error("CollectionItem must be wrapped in CollectionProvider");
 *   }
 *
 *   // Use the store...
 * }
 */
export declare const useCollectionContext: () => CollectionStore<{
    id: string;
    element?: HTMLElement | null | undefined;
}> | undefined;
export declare const useCollectionScopedContext: (onlyScoped?: boolean) => CollectionStore<{
    id: string;
    element?: HTMLElement | null | undefined;
}> | undefined;
export declare const useCollectionProviderContext: () => CollectionStore<{
    id: string;
    element?: HTMLElement | null | undefined;
}> | undefined;
export declare const CollectionContextProvider: (props: import("react").ProviderProps<CollectionStore<{
    id: string;
    element?: HTMLElement | null | undefined;
}> | undefined>) => import("react/jsx-runtime").JSX.Element;
export declare const CollectionScopedContextProvider: (props: import("react").ProviderProps<CollectionStore<{
    id: string;
    element?: HTMLElement | null | undefined;
}> | undefined>) => import("react/jsx-runtime").JSX.Element;
