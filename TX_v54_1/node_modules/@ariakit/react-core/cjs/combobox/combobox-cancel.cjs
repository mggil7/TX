"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _EZKYHQVFcjs = require('../__chunks/EZKYHQVF.cjs');


var _ZBG4TGVLcjs = require('../__chunks/ZBG4TGVL.cjs');
require('../__chunks/HWZH54NB.cjs');
require('../__chunks/H7R5D2FR.cjs');
require('../__chunks/NHZBX2RS.cjs');
require('../__chunks/AKOG5S2T.cjs');
require('../__chunks/W6ZRSMO5.cjs');
require('../__chunks/A2NMYLCG.cjs');
require('../__chunks/GQAB4M3B.cjs');
require('../__chunks/LHHW5ZQP.cjs');




var _Z5PUIG6Acjs = require('../__chunks/Z5PUIG6A.cjs');


var _5WLTMVVQcjs = require('../__chunks/5WLTMVVQ.cjs');
require('../__chunks/7WUTS26Y.cjs');




var _72I2GWXFcjs = require('../__chunks/72I2GWXF.cjs');

// src/combobox/combobox-cancel.tsx
var _misc = require('@ariakit/core/utils/misc');
var _jsxruntime = require('react/jsx-runtime');
var children = /* @__PURE__ */ _jsxruntime.jsxs.call(void 0, 
  "svg",
  {
    "aria-hidden": "true",
    display: "block",
    viewBox: "0 0 16 16",
    fill: "none",
    stroke: "currentColor",
    strokeLinecap: "round",
    strokeLinejoin: "round",
    strokeWidth: "1pt",
    width: "1em",
    height: "1em",
    pointerEvents: "none",
    children: [
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "line", { x1: "5", y1: "5", x2: "11", y2: "11" }),
      /* @__PURE__ */ _jsxruntime.jsx.call(void 0, "line", { x1: "5", y1: "11", x2: "11", y2: "5" })
    ]
  }
);
var useComboboxCancel = _Z5PUIG6Acjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, { store } = _b, props = _72I2GWXFcjs.__objRest.call(void 0, _b, ["store"]);
    const context = _ZBG4TGVLcjs.useComboboxProviderContext.call(void 0, );
    store = store || context;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "ComboboxCancel must receive a `store` prop or be wrapped in a ComboboxProvider component."
    );
    const onClickProp = props.onClick;
    const onClick = _5WLTMVVQcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      store == null ? void 0 : store.setValue("");
      store == null ? void 0 : store.move(null);
    });
    const comboboxId = store.useState((state) => {
      var _a2;
      return (_a2 = state.baseElement) == null ? void 0 : _a2.id;
    });
    props = _72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {
      children,
      "aria-label": "Clear input",
      // This aria-controls will ensure the combobox popup remains visible when
      // this element gets focused. This logic is done in the ComboboxPopover
      // component.
      "aria-controls": comboboxId
    }, props), {
      onClick
    });
    props = _EZKYHQVFcjs.useButton.call(void 0, props);
    return props;
  }
);
var ComboboxCancel = _Z5PUIG6Acjs.createComponent.call(void 0, 
  (props) => {
    const htmlProps = useComboboxCancel(props);
    return _Z5PUIG6Acjs.createElement.call(void 0, "button", htmlProps);
  }
);
if (process.env.NODE_ENV !== "production") {
  ComboboxCancel.displayName = "ComboboxCancel";
}



exports.ComboboxCancel = ComboboxCancel; exports.useComboboxCancel = useComboboxCancel;
