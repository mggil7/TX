"use strict";Object.defineProperty(exports, "__esModule", {value: true});

var _KFXK3MNIcjs = require('./KFXK3MNI.cjs');



var _6RYSMHQYcjs = require('./6RYSMHQY.cjs');


var _LPFT4ZFHcjs = require('./LPFT4ZFH.cjs');


var _GUWJ7VTOcjs = require('./GUWJ7VTO.cjs');




var _Z5PUIG6Acjs = require('./Z5PUIG6A.cjs');


var _EVNF7KMTcjs = require('./EVNF7KMT.cjs');



var _5WLTMVVQcjs = require('./5WLTMVVQ.cjs');




var _72I2GWXFcjs = require('./72I2GWXF.cjs');

// src/menu/menu-item.ts
var _dom = require('@ariakit/core/utils/dom');
var _events = require('@ariakit/core/utils/events');
var _misc = require('@ariakit/core/utils/misc');
var useMenuItem = _Z5PUIG6Acjs.createHook.call(void 0, 
  (_a) => {
    var _b = _a, {
      store,
      hideOnClick = true,
      preventScrollOnKeyDown = true,
      focusOnHover
    } = _b, props = _72I2GWXFcjs.__objRest.call(void 0, _b, [
      "store",
      "hideOnClick",
      "preventScrollOnKeyDown",
      "focusOnHover"
    ]);
    const menuContext = _6RYSMHQYcjs.useMenuScopedContext.call(void 0, true);
    const menuBarContext = _6RYSMHQYcjs.useMenuBarScopedContext.call(void 0, );
    store = store || menuContext || menuBarContext;
    _misc.invariant.call(void 0, 
      store,
      process.env.NODE_ENV !== "production" && "MenuItem must be wrapped in a MenuList, Menu or MenuBar component"
    );
    const onClickProp = props.onClick;
    const hideOnClickProp = _5WLTMVVQcjs.useBooleanEvent.call(void 0, hideOnClick);
    const hideMenu = "hideAll" in store ? store.hideAll : void 0;
    const isWithinMenu = !!hideMenu;
    const onClick = _5WLTMVVQcjs.useEvent.call(void 0, (event) => {
      onClickProp == null ? void 0 : onClickProp(event);
      if (event.defaultPrevented)
        return;
      if (_events.isDownloading.call(void 0, event))
        return;
      if (_events.isOpeningInNewTab.call(void 0, event))
        return;
      if (!hideMenu)
        return;
      const popupType = event.currentTarget.getAttribute("aria-haspopup");
      if (popupType === "menu")
        return;
      if (!hideOnClickProp(event))
        return;
      hideMenu();
    });
    const contentElement = _EVNF7KMTcjs.useStoreState.call(void 0, 
      store,
      (state) => "contentElement" in state ? state.contentElement : null
    );
    const role = _dom.getPopupItemRole.call(void 0, contentElement, "menuitem");
    props = _72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {
      role
    }, props), {
      onClick
    });
    props = _GUWJ7VTOcjs.useCompositeItem.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, { store, preventScrollOnKeyDown }, props));
    props = _LPFT4ZFHcjs.useCompositeHover.call(void 0, _72I2GWXFcjs.__spreadProps.call(void 0, _72I2GWXFcjs.__spreadValues.call(void 0, {
      store
    }, props), {
      focusOnHover: (event) => {
        if (typeof focusOnHover === "function")
          return focusOnHover(event);
        if (focusOnHover != null)
          return focusOnHover;
        if (event.type === "mouseleave")
          return isWithinMenu;
        const state = store == null ? void 0 : store.getState();
        if (isWithinMenu) {
          if (event.currentTarget.hasAttribute("aria-expanded")) {
            event.currentTarget.focus();
          }
          return true;
        } else if (_KFXK3MNIcjs.hasExpandedMenuButton.call(void 0, state == null ? void 0 : state.items, event.currentTarget)) {
          event.currentTarget.focus();
          return true;
        }
        return false;
      }
    }));
    return props;
  }
);
var MenuItem = _Z5PUIG6Acjs.createMemoComponent.call(void 0, (props) => {
  const htmlProps = useMenuItem(props);
  return _Z5PUIG6Acjs.createElement.call(void 0, "div", htmlProps);
});
if (process.env.NODE_ENV !== "production") {
  MenuItem.displayName = "MenuItem";
}




exports.useMenuItem = useMenuItem; exports.MenuItem = MenuItem;
