import type { CompositeOptions } from "../composite/composite.js";
import type { As, Props } from "../utils/types.js";
import type { MenuBarStore } from "./menu-bar-store.js";
/**
 * Returns props to create a `MenuBar` component.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const store = useMenuBarStore();
 * const menuBarProps = useMenuBar({ store });
 * const fileProps = useMenuItem({ store });
 * const fileMenu = useMenuStore();
 * <Role {...menuBarProps}>
 *   <MenuButton {...fileProps} store={fileMenu}>
 *     File
 *   </MenuButton>
 *   <Menu store={fileMenu}>
 *     <MenuItem>New File</MenuItem>
 *     <MenuItem>New Window</MenuItem>
 *   </Menu>
 * </Role>
 * ```
 */
export declare const useMenuBar: import("../utils/types.js").Hook<MenuBarOptions<"div">>;
/**
 * Renders a menu bar that may contain a group of menu items that control other
 * submenus.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * <MenuBarProvider>
 *   <MenuBar>
 *     <MenuProvider>
 *       <MenuItem render={<MenuButton />}>File</MenuItem>
 *       <Menu>
 *         <MenuItem>New File</MenuItem>
 *         <MenuItem>New Window</MenuItem>
 *       </Menu>
 *     </MenuProvider>
 *     <MenuProvider>
 *       <MenuItem render={<MenuButton />}>Edit</MenuItem>
 *       <Menu>
 *         <MenuItem>Undo</MenuItem>
 *         <MenuItem>Redo</MenuItem>
 *       </Menu>
 *     </MenuProvider>
 *   </MenuBar>
 * </MenuBarProvider>
 * ```
 */
export declare const MenuBar: import("../utils/types.js").Component<MenuBarOptions<"div">>;
export interface MenuBarOptions<T extends As = "div"> extends CompositeOptions<T> {
    /**
     * Object returned by the
     * [`useMenuBarStore`](https://ariakit.org/reference/use-menu-bar-store) hook.
     * If not provided, the closest
     * [`MenuBarProvider`](https://ariakit.org/reference/menu-bar-provider)
     * component's context will be used.
     */
    store?: MenuBarStore;
}
export type MenuBarProps<T extends As = "div"> = Props<MenuBarOptions<T>>;
