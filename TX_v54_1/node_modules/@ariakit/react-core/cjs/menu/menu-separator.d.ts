import type { CompositeSeparatorOptions } from "../composite/composite-separator.js";
import type { As, Props } from "../utils/types.js";
import type { MenuStore } from "./menu-store.js";
/**
 * Returns props to create a `MenuSeparator` component.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * const store = useMenuStore();
 * const props = useMenuSeparator({ store });
 * <MenuButton store={store}>Edit</MenuButton>
 * <Menu store={store}>
 *   <MenuItem>Undo</MenuItem>
 *   <MenuItem>Redo</MenuItem>
 *   <Role {...props} />
 *   <MenuItem>Cut</MenuItem>
 * </Menu>
 * ```
 */
export declare const useMenuSeparator: import("../utils/types.js").Hook<MenuSeparatorOptions<"hr">>;
/**
 * Renders a separator for menu items.
 * @see https://ariakit.org/components/menu
 * @example
 * ```jsx
 * <MenuProvider>
 *   <MenuButton>Edit</MenuButton>
 *   <Menu>
 *     <MenuItem>Undo</MenuItem>
 *     <MenuItem>Redo</MenuItem>
 *     <MenuSeparator />
 *     <MenuItem>Cut</MenuItem>
 *   </Menu>
 * </MenuProvider>
 * ```
 */
export declare const MenuSeparator: import("../utils/types.js").Component<MenuSeparatorOptions<"hr">>;
export interface MenuSeparatorOptions<T extends As = "hr"> extends CompositeSeparatorOptions<T> {
    /**
     * Object returned by the
     * [`useMenuStore`](https://ariakit.org/reference/use-menu-store) hook. If not
     * provided, the closest [`Menu`](https://ariakit.org/reference/menu) or
     * [`MenuProvider`](https://ariakit.org/reference/menu-provider) components'
     * context will be used.
     */
    store?: MenuStore;
}
export type MenuSeparatorProps<T extends As = "hr"> = Props<MenuSeparatorOptions<T>>;
